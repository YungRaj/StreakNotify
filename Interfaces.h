
#import <CoreFoundation/CoreFoundation.h>
#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
#import <objc/runtime.h>
#import <BulletinBoard/BBServer.h>


// I'm sorry this is a spam file, haven't gone through each definition of each class to figure out what methods are used and which ones are not... but these are just classes dumped by class-dump so that I can get this thing to compile
// Remember: not all this is going to be used, need to figure out which methods are going to be used/hooked into and which variables/properties will be used
typedef id CDUnknownBlockType;

@interface CPDistributedMessagingCenter : NSObject

+ (instancetype)centerNamed:(NSString *)name;

- (void)runServer;
- (void)runServerOnCurrentThread;
- (void)stopServer;

- (void)registerForMessageName:(NSString *)messageName target:(id)target selector:(SEL)selector;

- (BOOL)sendMessageName:(NSString *)messageName userInfo:(NSDictionary *)userInfo;

- (NSDictionary *)sendMessageAndReceiveReplyName:(NSString *)messageName userInfo:(NSDictionary *)userInfo;
- (NSDictionary *)sendMessageAndReceiveReplyName:(NSString *)messageName userInfo:(NSDictionary *)userInfo error:(NSError **)error;

@end

@class NSLock, NSMutableDictionary, NSString;

@interface CPDistributedNotificationCenter : NSObject {
    NSString* _centerName;
    NSLock* _lock;
    CFRunLoopSourceRef _receiveNotificationSource;
    BOOL _isServer;
    NSMutableDictionary* _sendPorts;
    unsigned _startCount;
}
+(CPDistributedNotificationCenter*)centerNamed:(NSString*)centerName;
-(id)_initWithServerName:(NSString*)serverName;
-(NSString*)name;
-(void)_createReceiveSourceForRunLoop:(CFRunLoopRef)runLoop;
-(void)_checkIn;
-(void)_checkOutAndRemoveSource;
-(void)_notificationServerWasRestarted;
-(void)runServer;
-(void)startDeliveringNotificationsToMainThread;
-(void)postNotificationName:(NSString*)name;
-(void)postNotificationName:(NSString*)name userInfo:(NSDictionary*)info;
-(BOOL)postNotificationName:(NSString*)name userInfo:(NSDictionary*)info toBundleIdentifier:(NSString*)bundleIdentifier;
@end

@class NSDate, NSMutableArray, NSString, SCChat;
@protocol SCFeedItemDelegate, SCFilterableProtocol;

@interface SCChatViewModelForFeed : NSObject
{
    NSDate *_currentDisplayMessageGeneratedTimestamp;
    id  _currentDisplayingMessage;
    id  _feedDisplayedMessageDelegate;
    SCChat *_chat;
    NSMutableArray *_messagesToDisplayInFeed;
    unsigned long long _nextMessageToDisplayIndex;
    double _timeUntilCurrentFeedIconExpires;
    long long _currentPriority;
}

@property(nonatomic) long long currentPriority;
@property(nonatomic) double timeUntilCurrentFeedIconExpires;
@property(nonatomic) unsigned long long nextMessageToDisplayIndex;
@property(retain, nonatomic) NSMutableArray *messagesToDisplayInFeed;
@property(retain, nonatomic) SCChat *chat;
@property(weak, nonatomic) __weak id feedDisplayedMessageDelegate;
@property(retain, nonatomic) id currentDisplayingMessage;
- (_Bool)shouldShowPendingChatInfo;
- (long long)compareMessagesTimestamp:(id)arg1 message2:(id)arg2;
- (_Bool)matches:(id)arg1;
- (_Bool)shouldDisableMiniProfile;
- (_Bool)shouldDisableFeedSwiping;
- (long long)compareTo:(id)arg1;
- (_Bool)shouldShowReplyLabelBriefly;
- (id)username;
- (id)snapToDisplay;
- (void)resetFeedItem;
- (_Bool)isExpired;
- (void)refreshData;
- (void)resetNextVC:(id)arg1;
- (void)prepareNextVC:(id)arg1;
- (_Bool)shouldBounceCellByDefault;
- (unsigned long long)displayedLeftTime;
- (_Bool)shouldShowIconWithTime;
- (id)showedSubLabelCompletionHandler;
- (double)timeUntilDisplayedMessageExpires;
- (id)friendForFeedItem;
- (_Bool)shouldHighlightBackgroundIcon;
- (id)iconForBackgroundHighlightedImageName;
- (id)iconForBackgroundImageName;
- (_Bool)shouldShowActivityIndicator;
- (_Bool)shouldShowSubLabelWithoutAppendingDate;
- (_Bool)shouldHideSubLabel;
- (id)feedIconImageName;
- (id)timestamp;
- (id)subLabelText;
- (id)mainLabelFontKey;
- (id)mainLabelText;
- (void)updateMostRecentMessagesToDisplayWithLastMessages;
- (void)clearAllAttributes;
- (void)addOrReplaceNewReceivedMessages:(id)arg1 newMessage:(id)arg2;
- (void)updateMessagesToDisplay;
- (void)updateWithChat:(id)arg1;
- (id)initWithSCChat:(id)arg1;
@end

@class NSString, SCFeedItem;

@interface SCFeedChatCellViewModel : NSObject
{
    SCFeedItem *_feedItem;
}

@property(retain, nonatomic) SCFeedItem *feedItem; // @synthesize feedItem=_feedItem;
- (_Bool)matches:(id)arg1;
- (_Bool)shouldShowSnapSubstituteSubLabelBriefly;
- (id)snapToHandle;
- (long long)addFriendButtonState;
- (unsigned long long)snapLeftTime;
- (_Bool)canReplaySnap;
- (_Bool)canShowReplyButtion;
- (_Bool)shouldShowSnapLeftTime;
- (long long)snapReplayMediaType;
- (id)snapToReplay;
- (CDUnknownBlockType)showedSubLabelCompletionHandler;
- (id)substituteSubLabelText;
- (_Bool)shouldShowActivityIndicator;
- (id)feedIconImageName;
- (id)timestamp;
- (id)subLabelText;
- (id)displayNameFontKey;
- (id)displayName;
- (id)friendUsername;
- (_Bool)shouldDisableFeedSwiping;
- (_Bool)shouldBounceCellByDefault;
- (_Bool)shouldHighlightBackgroundIcon;
- (_Bool)hasUnreadMessages;
- (_Bool)hasFailedMessages;
- (id)identifier;
- (id)reusableCellIdentifier;
- (id)initWithFeedItem:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end


@class NSDate, NSString, SCChat;
@protocol SCChatMessage, SCMessageTableViewCellDelegate, SCFeedDisplayMessageDelegate;

@interface SCChatFeedCellViewModel : NSObject 
{
    NSDate *_currentDisplayMessageGeneratedTimestamp;
    SCChat *_chat;
    // id <SCFeedDisplayMessageDelegate> _delegate;
    _Bool _hasFailedMessages;
    _Bool _hasUnreadMessages;
    double _timeUntilCurrentFeedIconExpires;
    // id <SCChatMessage><SCMessageTableViewCellDelegate> _currentDisplayingMessage;
}

@property(readonly, nonatomic) _Bool hasUnreadMessages; // @synthesize hasUnreadMessages=_hasUnreadMessages;
@property(readonly, nonatomic) _Bool hasFailedMessages; // @synthesize hasFailedMessages=_hasFailedMessages;
// @property(readonly, nonatomic) id <SCChatMessageSCMessageTableViewCellDelegate> currentDisplayingMessage; // @synthesize currentDisplayingMessage=_currentDisplayingMessage;
// @property(readonly, nonatomic) __weak id <SCFeedDisplayMessageDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) double timeUntilCurrentFeedIconExpires; // @synthesize timeUntilCurrentFeedIconExpires=_timeUntilCurrentFeedIconExpires;
- (_Bool)isSentByUser:(id)arg1;
- (_Bool)shouldShowPendingChatInfo;
- (long long)compareMessagesTimestamp:(id)arg1 message2:(id)arg2;
- (id)nameToCompare;
- (id)timestampToCompare;
- (_Bool)matches:(id)arg1;
- (long long)addFriendButtonState;
- (_Bool)shouldDisableChatForAddFriendFeed;
- (_Bool)shouldDisableMiniProfile;
- (_Bool)shouldDisableFeedSwiping;
- (_Bool)shouldShowSnapSubstituteSubLabelBriefly;
- (id)snapToDisplayIcon;
- (id)snapToDisplay;
- (_Bool)isExpired;
- (void)refreshFeedItem;
- (_Bool)shouldBounceCellByDefault;
- (unsigned long long)snapLeftTime;
- (_Bool)shouldShowSnapLeftTime;
- (id)showedSubLabelCompletionHandler;
- (_Bool)_isFriend;
- (id)friendUsername;
- (_Bool)shouldHighlightBackgroundIcon;
- (_Bool)shouldShowActivityIndicator;
- (id)messageForDisplayingIconImage;
- (id)feedIconImageName;
- (id)timestamp;
- (_Bool)shouldShowBirthdayText;
- (id)substituteSubLabelText;
- (id)subLabelText;
- (id)displayNameFontKey;
- (id)displayName;
- (id)identifier;
- (id)reusableCellIdentifier;
- (id)updatedDisplayingMessageWithMostRecentMessages:(id)arg1;
- (void)updateDisplayingMessage;
- (void)updateCurrentDisplayingMessage:(id)arg1;
- (id)initWithChat:(id)arg1 delegate:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@class NSString, UILabel;

@interface SCFriendmojiView : UIView
{
    double _currentWidth;
    double _currentHeight;
    UILabel *_label;
    NSString *_currentlyDisplayedEmoji;
}

+ (id)createFriendmojiViewWithFriend:(id)arg1 andViewType:(long long)arg2;
+ (id)createFriendmojiViewWithFriend:(id)arg1;
@property(retain, nonatomic) NSString *currentlyDisplayedEmoji; 
@property(retain, nonatomic) UILabel *label;
@property(nonatomic) double currentHeight;
@property(nonatomic) double currentWidth;
- (_Bool)setLabelToText:(id)arg1;
- (void)layoutSubviews;
- (id)getFriendmojiForFriend:(id)arg1 andViewType:(long long)arg2;
- (_Bool)updateWithFriend:(id)arg1 andLineHeight:(unsigned long long)arg2 andViewType:(long long)arg3;
- (_Bool)updateWithFriend:(id)arg1 andViewType:(long long)arg2;
- (id)initWithFriend:(id)arg1 andLineHeight:(unsigned long long)arg2 andViewType:(long long)arg3;

@end


@class CLLocation, Media, NSArray, NSData, NSDate, NSMutableArray, NSMutableDictionary, NSString, SCSnapCommonLoggingParameters, SnapVideoFilter;
@class AVPlayerItem, AVURLAsset, NSData, NSNumber, NSString;

@interface Media : NSObject <NSCoding>
{
    _Bool _isLoading;
    _Bool _overlayPresent;
    _Bool _isThumbnail;
    _Bool _finishedPlaying;
    NSData *_mediaDataToUpload;
    NSNumber *_captionScreenPosition;
    NSNumber *_captionOrientation;
    NSString *_captionText;
    NSData *_overlayDataToUpload;
    AVPlayerItem *_playerItem;
    NSString *_key;
    NSString *_iv;
    AVURLAsset *_videoAsset;
}

+ (id)overlayPathWithMediaId:(id)arg1;
+ (id)videoPathWithMediaId:(id)arg1;
+ (void)removeFromDiskWithMediaId:(id)arg1;
+ (id)fastCodingKeys;
@property(nonatomic) _Bool finishedPlaying;
@property(retain, nonatomic) AVURLAsset *videoAsset;
@property(retain, nonatomic) NSString *iv;
@property(retain, nonatomic) NSString *key;
@property(nonatomic) _Bool isThumbnail;
@property(nonatomic) long long loadContext;
@property(retain, nonatomic) AVPlayerItem *playerItem;
@property(retain, nonatomic) NSData *overlayDataToUpload;
@property(nonatomic) _Bool overlayPresent;
@property(nonatomic) _Bool isLoading;
@property(retain, nonatomic) NSString *captionText;
@property(retain, nonatomic) NSNumber *captionOrientation;
@property(retain, nonatomic) NSNumber *captionScreenPosition;
@property(retain, nonatomic) NSData *mediaDataToUpload;
- (_Bool)isImage;
- (_Bool)isVideoWithSound;
- (_Bool)isVideo;
- (void)fetchMediaWithCompletion:(id)arg1;
- (void)fetchMediaUserInitiated:(_Bool)arg1 completion:(id)arg2;
- (id)requestKey;
- (void)bqUploadWithDataAndParameters:(id)arg1 parameters:(id)arg2;
- (void)uploadWithDataAndParameters:(id)arg1 parameters:(id)arg2;
- (void)upload;
- (void)imageProcessingDone;
- (void)baseNoteMediaProcessingDone;
- (void)gifFromCacheWithCompletion:(id)arg1;
- (void)imageFromCacheWithCompletion:(id)arg1;
- (id)overlayPath;
- (void)fetchOverlayDataWithCompletion:(id)arg1;
- (id)videoPath;
- (void)initPlayerItemWithCompletion:(id)arg1;
- (void)writeVideoToURL:(id)arg1 completion:(id)arg2;
- (void)saveDataToCache:(id)arg1 alreadyEncrypted:(_Bool)arg2 useClientEncryption:(_Bool)arg3 successBlock:(id)arg4 failureBlock:(id)arg5;
- (void)saveDataToCache:(id)arg1 useClientEncryption:(_Bool)arg2;
- (void)saveDataToCache:(id)arg1;
- (void)mediaFromCacheWithCompletionHandler:(id)arg1;
- (void)blobFromCacheWithCompletionHandler:(id)arg1;
- (void)archiveSnapData:(id)arg1 overlayData:(id)arg2 completion:(id)arg3;
- (void)unarchiveSnapAndOverlayFromData:(id)arg1 completionHandler:(id)arg2;
- (void)copyDataFromMedia:(id)arg1;
- (void)setArchivedDataToUpload:(id)arg1;
- (void)dataToUploadWithCompletion:(id)arg1;
- (id)dataToUpload;
- (_Bool)isBroadcast;
- (id)mediaId;
- (_Bool)isLoaded;
- (void)removeFromDisk;
- (void)removeFromCache;
- (_Bool)hasSeparateCaption;
- (void)setNilValueForKey:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (_Bool)preferFastCoding;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithJSONDictionary:(id)arg1;

@end


@class CLLocation, Media, NSArray, NSData, NSDate, NSMutableArray, NSMutableDictionary, NSString, SCSnapCommonLoggingParameters, SnapVideoFilter;

@interface EphemeralMedia : NSObject 
{
    _Bool _cameraFrontFacing;
    _Bool _shouldIncludeLocationData;
    Media *_media;
    NSString *__id;
    NSString *_captionText;
    NSString *_clientId;
    EphemeralMedia *_doublePostParent;
    long long _ephemeralMediaState;
    NSDate *_firstPostDate;
    NSString *_geoFilterId;
    NSArray *_allGeoFilterIds;
    NSString *_storyFilterId;
    NSString *_storyLensId;
    long long _geoFilterImpressions;
    CLLocation *_location;
    unsigned long long _numberOfTimesReloaded;
    Media *_thumbnailMedia;
    double _time;
    double _timeLeft;
    double _timeStartedViewing;
    long long _type;
    SnapVideoFilter *_videoFilter;
    double _videoTimeSoFar;
    NSDate *_viewedTimestamp;
    long long _orientation;
    SCSnapCommonLoggingParameters *_commonLoggingParameters;
    NSData *_rawThumbnailData;
    NSMutableDictionary *_secretShareLoggingParams;
    NSMutableDictionary *_shareLoggingParams;
    NSMutableDictionary *_eventLoggingParams;
    NSMutableArray *_targets;
    NSMutableArray *_viewingTimestamps;
}

+ (id)fastCodingKeys;
@property(retain, nonatomic) NSMutableArray *viewingTimestamps;
@property(retain, nonatomic) NSMutableArray *targets;
@property(retain, nonatomic) NSMutableDictionary *eventLoggingParams;
@property(retain, nonatomic) NSMutableDictionary *shareLoggingParams;
@property(retain, nonatomic) NSMutableDictionary *secretShareLoggingParams;
@property(nonatomic) _Bool shouldIncludeLocationData;
@property(copy, nonatomic) NSData *rawThumbnailData;
@property(copy, nonatomic) SCSnapCommonLoggingParameters *commonLoggingParameters;
@property(nonatomic) long long orientation;
@property(nonatomic) _Bool cameraFrontFacing;
@property(retain, nonatomic) NSDate *viewedTimestamp;
@property(nonatomic) double videoTimeSoFar;
@property(retain, nonatomic) SnapVideoFilter *videoFilter;
@property(nonatomic) long long type;
@property(nonatomic) double timeStartedViewing;
@property(nonatomic) double timeLeft;
@property(nonatomic) double time;
@property(retain, nonatomic) Media *thumbnailMedia;
@property(nonatomic) unsigned long long numberOfTimesReloaded;
@property(retain, nonatomic) CLLocation *location;
@property(nonatomic) long long geoFilterImpressions;
@property(retain, nonatomic) NSString *storyLensId;
@property(retain, nonatomic) NSString *storyFilterId;
@property(retain, nonatomic) NSArray *allGeoFilterIds;
@property(retain, nonatomic) NSString *geoFilterId;
@property(retain, nonatomic) NSDate *firstPostDate;
@property(nonatomic) long long ephemeralMediaState;
@property(retain, nonatomic) EphemeralMedia *doublePostParent;
@property(retain, nonatomic) NSString *clientId;
@property(retain, nonatomic) NSString *captionText;
@property(retain, nonatomic) NSString *_id;
- (void)markViewingTimestamp;
- (id)logId;
- (void)reprocessVideo;
- (_Bool)timeToSendHasExpired;
- (id)uploadFailureBlock;
- (id)uploadSuccessBlock;
- (id)uploadParametersWithData:(_Bool)arg1;
- (void)setUploading;
- (void)doublePost;
- (void)addTarget:(id)arg1;
- (void)imageProcessingDidSucceedForMedia:(id)arg1;
- (void)uploadMedia;
- (id)username;
- (void)mediaUploadDidFailForMedia:(id)arg1;
- (void)mediaUploadDidSucceedForMedia:(id)arg1;
- (long long)uploadMediaTypeForMedia:(id)arg1;
- (id)uploadMediaIdForMedia:(id)arg1;
- (_Bool)isImage;
- (_Bool)isVideoWithSound;
- (_Bool)isVideoWithNoSound;
- (_Bool)isVideo;
- (id)requestContexts;
- (_Bool)needsAuthToFetch;
- (_Bool)encrypt;
- (_Bool)persist;
- (id)encryptionDictionaryForMedia:(id)arg1;
- (id)decryptData:(id)arg1 forMedia:(id)arg2;
- (id)mediaIdForMedia:(id)arg1;
- (id)endpointParamsForMedia:(id)arg1;
- (id)endpointForMedia:(id)arg1;
- (void)targetSetVideoFilter:(id)arg1;
- (void)targetSetMedia:(id)arg1;
- (void)resetMedia;
@property(retain, nonatomic) Media *media; // @synthesize media=_media;
- (void)copyDataFromEphemeralMedia:(id)arg1;
- (void)setupThumbnailMedia;
- (void)didDecodeObject;
- (void)setNilValueForKey:(id)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (_Bool)preferFastCoding;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)loggingParametersForEvent:(id)arg1;
- (void)setLoggingParameters:(id)arg1 forEvent:(id)arg2;
- (void)logEvent:(id)arg1;
- (void)addEventLoggingParameters:(id)arg1;
- (id)eventLoggingParameters;
- (id)secretShareLoggingParameters;
- (void)addSecretShareLoggingParameters:(id)arg1;
- (id)shareLoggingParameters;
- (void)addShareLoggingParameters:(id)arg1;
- (id)typeParams;
- (id)initWithJSONDictionary:(id)arg1;
- (id)initWithClientId;
- (id)init;
@end



@class AVPlayerItem, NSArray, NSDate, NSMutableDictionary, NSNumber, NSString, NSURL, SnapTrophyMetrics;

@interface Snap : EphemeralMedia
{
    _Bool _canBeReplayed;
    _Bool _clearedBySender;
    _Bool _clearedByRecipient;
    _Bool _displayedActionTextInFeed;
    _Bool _doubleTap;
    _Bool _failedAtLeastOnce;
    _Bool _pending;
    _Bool _recentlyViewedAndHasNotLeftView;
    _Bool _replayed;
    _Bool _expiredWhileStackNotEmpty;
    _Bool _isInitialView;
    _Bool _isPaidToReplay;
    _Bool _isLastViewedSnapInStack;
    _Bool _hideBroadcastTimer;
    _Bool _broadcastSnap;
    double _closedAt;
    NSString *_display;
    long long _groupId;
    NSString *_sender;
    NSString *_recipient;
    NSArray *_recipients;
    long long _replayAnimationStateFeed;
    long long _replayAnimationStateChat;
    long long _screenshots;
    NSDate *_sentTimestamp;
    long long _status;
    long long _state;
    NSDate *_timestamp;
    NSString *_encryptedSnapId;
    NSDate *_finishViewingTimestamp;
    long long _viewSource;
    AVPlayerItem *_playerItem;
    double _secondsViewed;
    double _timeStartedOnScreen;
    NSNumber *_time_left;
    NSString *_broadcastActionText;
    NSString *_broadcastSecondaryText;
    NSURL *_broadcastUrlToOpen;
    NSURL *_broadcastMediaUrl;
    SnapTrophyMetrics *_snapTrophyMetrics;
    NSString *_stackId;
    unsigned long long _numTimesReloaded;
    unsigned long long _numAutomaticRetries;
    NSMutableDictionary *_purchaseReceipt;
}

+ (id)targetSnapFromEphemeralMedia:(id)arg1;
+ (id)snapFromEphemeralMedia:(id)arg1;
+ (id)stringForSnapStatus:(long long)arg1;
+ (id)stringForSnapState:(long long)arg1;
@property(retain, nonatomic) NSMutableDictionary *purchaseReceipt;
@property(nonatomic) unsigned long long numAutomaticRetries;
@property(nonatomic) unsigned long long numTimesReloaded;
@property(copy, nonatomic) NSString *stackId;
@property(retain, nonatomic) SnapTrophyMetrics *snapTrophyMetrics;
@property(retain, nonatomic) NSURL *broadcastMediaUrl;
@property(retain, nonatomic) NSURL *broadcastUrlToOpen;
@property(nonatomic) _Bool broadcastSnap;
@property(nonatomic) _Bool hideBroadcastTimer;
@property(retain, nonatomic) NSString *broadcastSecondaryText;
@property(retain, nonatomic) NSString *broadcastActionText;
@property(retain, nonatomic) NSNumber *time_left;
@property(nonatomic) double timeStartedOnScreen;
@property(nonatomic) double secondsViewed;
@property(retain, nonatomic) AVPlayerItem *playerItem;
@property(nonatomic) _Bool isLastViewedSnapInStack;
@property(nonatomic) _Bool isPaidToReplay;
@property(nonatomic) _Bool isInitialView;
@property(nonatomic) long long viewSource;
@property(retain, nonatomic) NSDate *finishViewingTimestamp;
@property(copy, nonatomic) NSString *encryptedSnapId;
@property(nonatomic) _Bool expiredWhileStackNotEmpty;
@property(retain, nonatomic) NSDate *timestamp;
@property(nonatomic) long long state;
@property(nonatomic) long long status;
@property(retain, nonatomic) NSDate *sentTimestamp;
@property(nonatomic) long long screenshots;
@property(nonatomic) _Bool replayed;
@property(nonatomic) long long replayAnimationStateChat;
@property(nonatomic) long long replayAnimationStateFeed;
@property(retain, nonatomic) NSArray *recipients;
@property(retain, nonatomic) NSString *recipient;
@property(nonatomic) _Bool recentlyViewedAndHasNotLeftView;
@property(retain, nonatomic) NSString *sender;
@property(nonatomic) _Bool pending;
@property(nonatomic) long long groupId;
@property(nonatomic) _Bool failedAtLeastOnce;
@property(nonatomic) _Bool doubleTap;
@property(nonatomic) _Bool displayedActionTextInFeed;
@property(retain, nonatomic) NSString *display;
@property(nonatomic) double closedAt;
@property(nonatomic) _Bool clearedByRecipient;
@property(nonatomic) _Bool clearedBySender;
@property(nonatomic) _Bool canBeReplayed;
- (_Bool)canDelete;
- (void)setFailed;
- (_Bool)hasFailedAtLeastOnce;
- (long long)getGroupId;
- (id)clearedDictionary;
- (_Bool)sending;
- (_Bool)failedToSend;
- (_Bool)sentByUser;
- (_Bool)isInvalidAfterUnarchiving;
- (_Bool)isUnread;
- (_Bool)shouldDisplayBelowFoldInChat;
- (id)messageRecipient;
- (id)messageSender;
- (id)sequenceNumber;
- (id)feedSortTimestamp;
- (id)feedDisplayTimestamp;
- (id)messageTimestamp;
- (void)imageProcessingDidSucceedForMedia:(id)arg1;
- (void)mediaUploadDidFailForMedia:(id)arg1;
- (void)mediaUploadDidSucceedForMedia:(id)arg1;
- (long long)uploadMediaTypeForMedia:(id)arg1;
- (id)uploadMediaIdForMedia:(id)arg1;
- (void)fetchMediaDidSucceedForMedia:(id)arg1;
- (void)fetchMediaIsGoneForMedia:(id)arg1;
- (void)fetchMediaDidFailForMedia:(id)arg1;
- (void)fetchMediaIsLoadingForMedia:(id)arg1;
- (_Bool)isBroadcastForMedia:(id)arg1;
- (id)requestContexts;
- (long long)requestFallbackPriority;
- (long long)requestPriorityUserInitiated:(_Bool)arg1;
- (_Bool)needsAuthToFetch;
- (_Bool)encrypt;
- (_Bool)persist;
- (id)encryptionDictionaryForMedia:(id)arg1;
- (id)decryptData:(id)arg1 forMedia:(id)arg2;
- (id)mediaIdForMedia:(id)arg1;
- (id)endpointParamsForMedia:(id)arg1;
- (id)endpointForMedia:(id)arg1;
- (void)createPurchaseReceiptWithTransactionIdentifierAndDate:(id)arg1 transactionDate:(id)arg2 productId:(id)arg3 creditsAmount:(unsigned long long)arg4 receipt:(id)arg5;
- (id)getPurchaseReceiptJSON;
- (id)persistingFailuresURLForMedia:(id)arg1;
- (void)loadPersistedFailedSnapData;
- (id)uploadSuccessUserDefaultsKey;
@property(readonly, copy) NSString *description;
- (id)secretReceivedSnapParameters;
- (id)receivedSnapParameters;
- (id)secretSentSnapParameters;
- (id)sentSnapParameters;
- (void)logSendEvent;
- (id)consistentId;
- (_Bool)veryRecentlyOpen;
- (id)username;
- (_Bool)isExpired;
- (_Bool)canBeRemoved;
- (_Bool)isGroupSend;
- (id)nameForView;
- (id)recipientUsernames;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)replaceWithSnap:(id)arg1;
- (_Bool)shouldReplaceWithSnap:(id)arg1;
- (_Bool)updateWithSnap:(id)arg1;
- (_Bool)isBroadcastAndFromGCS;
- (_Bool)isPreparedToReplayOrReplaying;
- (_Bool)isSentSnap;
- (_Bool)isReceivedAndUnopened;
- (_Bool)isReceivedAndOpened;
- (_Bool)isViewing;
- (_Bool)isLoading;
- (_Bool)isLoaded;
- (_Bool)isNotLoaded;
- (_Bool)isScreenshotted;
- (_Bool)isSentAndOpened;
- (_Bool)isDelivered;
- (_Bool)isSentDeliveredOrOpened;
- (_Bool)isSent;
- (_Bool)isSendingOrHasFailed;
- (_Bool)isMediaProcessingOrFailedToProcess;
- (_Bool)isMediaProcessing;
- (_Bool)hasMediaProcessingFailed;
- (_Bool)hasFailed;
- (_Bool)isSending;
- (id)uploadParametersWithData:(_Bool)arg1;
- (void)uploadSnap;
- (void)setUploading;
- (void)retrySending:(_Bool)arg1;
- (_Bool)autoRetrySendingIfNetworkReachable;
- (void)doSend;
- (void)postSend;
- (void)send;
- (void)preSend;
- (void)uploadAndSend;
- (void)markAsFailedToSendAndExpired;
- (_Bool)shouldClearSentSnap;
- (void)incNumTimesReloaded;
- (_Bool)isSentButNotYetReturned;
- (void)clearNumTimesReloaded;
- (void)markAsViewed;
- (void)replay;
- (void)initFields;
- (id)updatedSnapDictionary;
- (id)initWithJSONDictionary:(id)arg1;
- (id)initwithReceivedMessageSCCPJSONDictionary:(id)arg1;
- (void)assignNewClientId;
- (id)initWithClientId;

@end


@protocol SCBaseMediaMessageUploadingDelegate, SCBaseMessageParametersDelegate, SCChatMediaMessageSendingDelegate, SCChatReceiveBufferDelegate, SCMessage;

@class NSArray, NSDate, NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, NSTimer, SCBaseMessage, SCChatDraft, SCChatMediaMessageUploader, SCChatMessageSendGroupAssigner, SCChatMessageSendQueue, SCChatReceiveBuffer, SCHereAuth, SCPaymentMessage, Snap;

@interface SCChat : NSObject
{
    _Bool _clearing;
    _Bool _recipientPresent;
    _Bool _recipientSupportsVideoChat;
    _Bool _receivedPush;
    _Bool _isChatUpdating;
    _Bool _senderPresent;
    _Bool _senderWasPresentNotYetCleared;
    _Bool _receivingVideo;
    _Bool _recipientReceivingVideo;
    _Bool _orphaned;
    _Bool _moreChatsToLoad;
    _Bool _recipientCanReceiveCash;
    _Bool _cashRainedViaCurrentSCCPSession;
    _Bool _fetchingAuth;
    _Bool _refreshingChat;
    _Bool _sequencesSyncInProgress;
    _Bool _loadingMoreChats;
    _Bool _sendingTypingRequest;
    SCChatDraft *_draft;
    NSString *_authMac;
    NSString *_authPayload;
    SCHereAuth *_hereAuth;
    NSString *_iterToken;
    NSDate *_lastInteractionTimestamp;
    SCBaseMessage *_lastWriteMessage;
    SCBaseMessage *_lastReadMessage;
    SCPaymentMessage *_lastPaymentMessage;
    Snap *_lastSnap;
    id <SCMessage> _latestRemovedMessage;
    NSString *_conversationInteractionEventType;
    NSString *_recipient;
    NSMutableArray *_sendingSnaps;
    NSMutableArray *_snapsToView;
    NSString *_chatIdToClear;
    double _refreshChatsTime;
    unsigned long long _lastReleasedUserChatSequence;
    unsigned long long _lastDeletedUserChatSequence;
    unsigned long long _lastReleasedRecipientChatSequence;
    NSDate *_lastUserReleasedUserReceivedSnapTimestamp;
    unsigned long long _lastUserChatSequence;
    long long _chatLoadingState;
    NSDate *_lastDisplayedInAppNotificationTimestamp;
    SCChatMediaMessageUploader *_chatMediaMessageUploader;
    NSString *_conversationAuthType;
    NSTimer *_chatMessageRetryTimer;
    NSMutableDictionary *_clearedChats;
    NSMutableArray *_failedToSendChatMessages;
    SCChatMessageSendGroupAssigner *_groupIdAssigner;
    double _lastSCCPSentChatTime;
    SCChatMessageSendQueue *_messageQueue;
    long long _numberOfMessagesSent;
    NSMutableArray *_pendingChatsToSend;
    NSTimer *_recipientPresenceTimer;
    NSMutableDictionary *_recognizedMessages;
    NSString *_sender;
    NSMutableArray *_sendingChatMessages;
    NSTimer *_senderPresenceTimer;
    NSMutableDictionary *_sentStickers;
    SCChatReceiveBuffer *_receiveBuffer;
    long long _initializedState;
    NSMutableDictionary *_allSnaps;
    NSMutableArray *_mutableMessages;
    NSMutableSet *_clearedPaymentMessageIdsToMarkAsViewed;
    long long _sequencesSyncState;
    unsigned long long _nextUserMessageSequence;
    unsigned long long _lastRecipientMessageSequence;
    unsigned long long _lastAckedUserChatSequence;
    unsigned long long _lastRecipientChatSequence;
    unsigned long long _lastDisplayReleasedUserChatSequence;
    NSDate *_lastUserReleasedUserSentSnapTimestamp;
    NSDate *_lastRecipientReleasedUserSentSnapTimestamp;
    NSDate *_lastRecipientReleasedUserReceivedSnapTimestamp;
    NSMutableDictionary *_recipientMessageSequences;
    unsigned long long _lastAckedReleasedUserChatSequence;
    unsigned long long _lastAckedDeletedUserChatSequence;
    NSDate *_lastAckedUserReleasedUserSentSnapTimestamp;
    NSDate *_lastAckedUserReleasedUserReceivedSnapTimestamp;
    unsigned long long _lastAckedDeletedUserSentChatSequence;
    NSString *_chatsIterToken;
    NSString *_chatTypingState;
    NSString *_recipientChatTypingState;
}

+ (id)baseMessageWithUsername:(id)arg1 forChatResponse:(id)arg2;
@property(nonatomic) _Bool sendingTypingRequest; 
@property(copy, nonatomic) NSString *recipientChatTypingState;
@property(copy, nonatomic) NSString *chatTypingState;
@property(nonatomic) _Bool loadingMoreChats;
@property(copy, nonatomic) NSString *chatsIterToken;
@property(nonatomic) unsigned long long lastAckedDeletedUserSentChatSequence;
@property(retain, nonatomic) NSDate *lastAckedUserReleasedUserReceivedSnapTimestamp;
@property(retain, nonatomic) NSDate *lastAckedUserReleasedUserSentSnapTimestamp;
@property(nonatomic) unsigned long long lastAckedDeletedUserChatSequence;
@property(nonatomic) unsigned long long lastAckedReleasedUserChatSequence;
@property(retain, nonatomic) NSMutableDictionary *recipientMessageSequences;
@property(retain, nonatomic) NSDate *lastRecipientReleasedUserReceivedSnapTimestamp;
@property(retain, nonatomic) NSDate *lastRecipientReleasedUserSentSnapTimestamp;
@property(retain, nonatomic) NSDate *lastUserReleasedUserSentSnapTimestamp;
@property(nonatomic) unsigned long long lastDisplayReleasedUserChatSequence;
@property(nonatomic) unsigned long long lastRecipientChatSequence;
@property(nonatomic) unsigned long long lastAckedUserChatSequence;
@property(nonatomic) unsigned long long lastRecipientMessageSequence;
@property(nonatomic) unsigned long long nextUserMessageSequence;
@property(nonatomic) _Bool sequencesSyncInProgress;
@property(nonatomic) long long sequencesSyncState;
@property(retain, nonatomic) NSMutableSet *clearedPaymentMessageIdsToMarkAsViewed;
@property(retain, nonatomic) NSMutableArray *mutableMessages;
@property(retain, nonatomic) NSMutableDictionary *allSnaps;
@property(nonatomic) long long initializedState;
@property(retain, nonatomic) SCChatReceiveBuffer *receiveBuffer;
@property(retain, nonatomic) NSMutableDictionary *sentStickers;
@property(retain, nonatomic) NSTimer *senderPresenceTimer;
@property(retain, nonatomic) NSMutableArray *sendingChatMessages;
@property(retain, nonatomic) NSString *sender;
@property(nonatomic) _Bool refreshingChat;
@property(retain, nonatomic) NSMutableDictionary *recognizedMessages;
@property(retain, nonatomic) NSTimer *recipientPresenceTimer;
@property(retain, nonatomic) NSMutableArray *pendingChatsToSend;
@property(nonatomic) long long numberOfMessagesSent;
@property(retain, nonatomic) SCChatMessageSendQueue *messageQueue;
@property(nonatomic) double lastSCCPSentChatTime;
@property(retain, nonatomic) SCChatMessageSendGroupAssigner *groupIdAssigner;
@property(nonatomic) _Bool fetchingAuth;
@property(retain, nonatomic) NSMutableArray *failedToSendChatMessages; 
@property(retain, nonatomic) NSMutableDictionary *clearedChats;
@property(retain, nonatomic) NSTimer *chatMessageRetryTimer;
@property(copy, nonatomic) NSString *conversationAuthType;
@property(retain, nonatomic) SCChatMediaMessageUploader *chatMediaMessageUploader;
@property(nonatomic) _Bool cashRainedViaCurrentSCCPSession;
@property(nonatomic) _Bool recipientCanReceiveCash;
@property(retain, nonatomic) NSDate *lastDisplayedInAppNotificationTimestamp;
@property(nonatomic) long long chatLoadingState;
@property(nonatomic) _Bool moreChatsToLoad;
@property(nonatomic, getter=isOrphaned) _Bool orphaned;
@property(nonatomic) unsigned long long lastUserChatSequence;
@property(retain, nonatomic) NSDate *lastUserReleasedUserReceivedSnapTimestamp;
@property(nonatomic) unsigned long long lastReleasedRecipientChatSequence;
@property(nonatomic) unsigned long long lastDeletedUserChatSequence;
@property(nonatomic) unsigned long long lastReleasedUserChatSequence;
@property(nonatomic) double refreshChatsTime;
@property(nonatomic) _Bool recipientReceivingVideo;
@property(nonatomic) _Bool receivingVideo;
@property(retain, nonatomic) NSString *chatIdToClear;
@property(retain, nonatomic) NSMutableArray *snapsToView;
@property(retain, nonatomic) NSMutableArray *sendingSnaps;
@property(nonatomic) _Bool senderWasPresentNotYetCleared;
@property(nonatomic) _Bool senderPresent;
@property(nonatomic) _Bool isChatUpdating;
@property(nonatomic) _Bool receivedPush;
@property(nonatomic) _Bool recipientSupportsVideoChat;
@property(nonatomic) _Bool recipientPresent;
@property(retain, nonatomic) NSString *recipient;
@property(retain, nonatomic) NSString *conversationInteractionEventType;
@property(retain, nonatomic) id <SCMessage> latestRemovedMessage;
@property(retain, nonatomic) Snap *lastSnap;
@property(retain, nonatomic) SCPaymentMessage *lastPaymentMessage;
@property(retain, nonatomic) SCBaseMessage *lastReadMessage;
@property(retain, nonatomic) SCBaseMessage *lastWriteMessage;
@property(retain, nonatomic) NSDate *lastInteractionTimestamp;
@property(copy, nonatomic) NSString *iterToken;
@property(retain, nonatomic) SCHereAuth *hereAuth;
@property(copy, nonatomic) NSString *authPayload;
@property(copy, nonatomic) NSString *authMac;
@property(retain, nonatomic) SCChatDraft *draft;
@property(nonatomic, getter=isClearing) _Bool clearing;
- (void)_addSentSticker:(id)arg1;
- (void)_removeExpiredStickersWithCurrentDay:(long long)arg1;
- (id)ourSentStickersWithCurrentDay:(long long)arg1;
- (void)removeMessageFromChat:(id)arg1;
- (void)appendMessagesToChat:(id)arg1;
- (void)handleFailedMessages:(id)arg1;
- (void)sendUploadedMessages:(id)arg1;
- (void)cleanPendingAuthToken;
- (_Bool)isPending;
- (void)resetIterToken;
- (long long)compare:(id)arg1;
@property(readonly, copy) NSString *description;
- (void)assignMessagesGroupId;
- (void)assignMessageGroupId:(id)arg1;
- (void)insertMessageToMutableArray:(id)arg1;
- (void)updateRecipientCashEligibility:(_Bool)arg1;
- (_Bool)hasUnviewedPayments;
- (void)markClearedPaymentMessageIdsAsViewed;
- (void)postPaymentMessageViewedStateUpdates;
- (void)updatePaymentMessageAsSent:(id)arg1;
- (void)markPaymentMessagesAsViewed;
- (void)postPaymentMessageSaveStateUpdate:(id)arg1;
- (void)unsavePaymentMessage:(id)arg1;
- (void)savePaymentMessage:(id)arg1;
- (void)clearWithCompletion:(id)arg1;
- (void)copySentHistoryFromDeletedDiscoverMessage:(id)arg1;
- (void)didFinishLoadingChatPage:(_Bool)arg1 failed:(_Bool)arg2;
- (void)didUserInitiateLoadingChatPage:(_Bool)arg1;
- (void)appendMessages:(id)arg1;
- (void)loadMoreChats;
- (_Bool)matches:(id)arg1;
- (_Bool)isValid;
- (id)snapsToViewIds;
- (_Bool)addReceivedSnap:(id)arg1 fromSource:(id)arg2;
- (void)addSnap:(id)arg1;
- (void)markExpiredSnapsInStackBeforeSnap:(id)arg1;
- (void)markExpiredSnapInStack:(id)arg1;
- (void)updateLatestRemovedMessageWithMessage:(id)arg1;
- (void)updateSnapAfterSent:(id)arg1 oldSnap:(id)arg2;
- (void)removeMessage:(id)arg1 updateLastRemovedMessage:(_Bool)arg2 postIndividualUpdates:(_Bool)arg3;
- (void)removeMessageWithoutPostingUpdates:(id)arg1;
- (void)removeMessage:(id)arg1;
- (void)removeMessageWithoutUpdates:(id)arg1;
- (void)removeMessagesWithoutUpdates:(id)arg1;
- (id)updateMaxDate:(id)arg1 withDate:(id)arg2;
- (id)timestamp;
- (double)totalSnapTime;
- (id)nextVideoSnap;
- (id)snapToDisplayInCell;
- (void)messagesToDisplayInCell:(id)arg1;
- (_Bool)firstSnapToViewIsLoaded;
- (_Bool)hasUnviewedSnaps;
- (_Bool)stackOfSnapsHasSound;
- (void)removeSentGroupedDiscoverSharedMessages:(id)arg1;
- (id)allSentDiscoverMessageKeys;
- (id)sentGroupSnap;
- (id)snapToDisplay;
- (void)loadSnap:(id)arg1 userInitiated:(_Bool)arg2;
- (void)loadSnapsFromSnap:(id)arg1;
- (void)loadSnapsNearSnap:(id)arg1;
- (void)loadBatchOfSnapsFromIndex:(long long)arg1 batchSize:(unsigned long long)arg2 userInitiated:(_Bool)arg3;
- (void)loadBatchOfSnapsFromIndex:(long long)arg1 initialBatch:(_Bool)arg2 userInitiated:(_Bool)arg3;
- (void)unpreserveMediaMessage:(id)arg1;
- (void)preserveMediaMessage:(id)arg1;
- (void)unpreserveLoadedMediaMessages;
- (void)loadMediaMessage:(id)arg1;
- (void)loadBatchOfMediaMessagesFromIndex:(long long)arg1 batchSize:(unsigned long long)arg2;
- (void)loadBatchOfMediaMessagesFromIndex:(long long)arg1 initialBatch:(_Bool)arg2;
- (id)mutableMessageIds;
- (id)sortedSnapsToView:(id)arg1;
- (id)sortedMessages:(id)arg1;
- (id)snapsToArchive;
- (id)allSnapsArray;
- (id)persistedMessages;
- (id)messageStateMessages;
- (id)paymentMessages;
- (id)snapMessages;
- (id)baseMessages;
- (unsigned long long)unrainedSwipePaymentAmountInDollarBills;
- (id)recipientBaseMessageWithHighestSequenceBeforeChatId:(id)arg1;
- (id)snapWithConsistentId:(id)arg1;
- (id)baseMessageWithId:(id)arg1;
- (_Bool)hasUnreadMessagesBeforeMessage:(id)arg1 afterMessage:(id)arg2;
- (_Bool)hasPreservedMessages;
- (_Bool)hasSavedMessages;
- (_Bool)hasUnreadChatMessages;
@property(readonly, nonatomic) NSArray *messages;
- (unsigned long long)count;
- (id)conversationId;
- (id)warningTextForCannotReceiveChat;
- (id)displayName;
- (id)mostRecentlyViewedSnap;
- (_Bool)markReceivedSnapsReleasedByUser;
- (_Bool)markSentSnapsReleasedByUser;
- (void)markAsReleasedByUserWithSequence:(unsigned long long)arg1 shouldLog:(_Bool)arg2;
- (void)markAsReleasedByUserWithSequence:(unsigned long long)arg1;
- (void)markAsReleasedByFriendWithSequence:(unsigned long long)arg1 timestamp:(id)arg2;
- (id)createStickerMessageWithSticker:(id)arg1;
- (void)appendMessage:(id)arg1;
- (id)createTextWithAttributedText:(id)arg1;
- (id)createTextWithText:(id)arg1;
- (void)didFillSequenceNumberGap;
- (void)didCreateSequenceNumberGap;
- (void)deliverMessage:(id)arg1;
- (void)handlePresenceResponse:(id)arg1;
- (void)handleCashSwipeResponse:(id)arg1;
- (void)handleCashStateResponse:(id)arg1;
- (void)handleSnapStateResponse:(id)arg1;
- (void)handleMessagePreservationResponse:(id)arg1;
- (void)handleMessageStateResponse:(id)arg1;
- (void)handleMessageReleaseResponse:(id)arg1;
- (void)handleChatMessageResponse:(id)arg1;
- (_Bool)isReceivedMessage:(id)arg1;
- (unsigned long long)nextUserChatMessageSequenceForMessage:(id)arg1;
- (id)chatMessageParametersWithSender:(id)arg1 recipient:(id)arg2;
- (void)chatMessageRetryTimerFired;
- (void)handleAckForReleaseMessage:(id)arg1;
- (void)message:(id)arg1 sentWithResult:(long long)arg2 response:(id)arg3;
- (void)message:(id)arg1 sentWithResult:(long long)arg2;
- (void)retryFailedMessages;
- (void)batchRefreshChatAfterDelay;
- (void)batchRefreshChat;
- (void)fetchAuthWithSuccessBlock:(id)arg1;
- (void)fetchAuth;
- (void)makeChatRequestWithMessage:(id)arg1 useMessageQueue:(_Bool)arg2;
- (void)makeChatRequestWithMessage:(id)arg1;
- (void)baseMediaMessageDidLoseMedia:(id)arg1;
- (void)baseMediaMessageDidFailUpload:(id)arg1;
- (void)baseMediaMessageDidUpload:(id)arg1;
- (_Bool)removeExpiredMessages;
- (void)retryFailedScreenshotMessages;
- (void)retrySendingBaseMessageGroupWithMessage:(id)arg1;
- (void)retrySendingAllFailedMessages;
- (void)retrySendingBaseMessage:(id)arg1;
- (id)sendPreservationChatMessage:(_Bool)arg1 forMessage:(id)arg2;
- (void)sendChatMessage:(id)arg1 ofType:(long long)arg2;
- (void)sendChat:(id)arg1;
- (void)sendPaymentMessage:(id)arg1 blockerResolution:(id)arg2;
- (void)sendPaymentSwipeMessage:(id)arg1;
- (void)sendHereScreenshot:(id)arg1;
- (void)sendChatScreenshot:(id)arg1;
- (void)sendSnapState:(id)arg1;
- (void)discoverMessageDidSentWithSuccess:(_Bool)arg1 discoverMessage:(id)arg2;
- (void)sendChatMedia:(id)arg1;
- (void)sendMultipleChatMedia:(id)arg1;
- (void)sendVideoNoteMedia:(id)arg1;
- (void)sendAudioNoteMedia:(id)arg1;
- (void)sendMedia:(id)arg1;
- (void)insertSendingMedia:(id)arg1;
- (void)sendStickerMessage:(id)arg1;
- (void)sendText:(id)arg1;
- (_Bool)hasSendingOrFailedMessages;
@property(readonly, nonatomic) _Bool hasAuth;
- (void)updateTimestamps;
- (void)resetPresenceTimers;
- (void)resetRecipientPresenceTimer;
- (void)resetSenderPresenceTimer;
- (void)recipientPresenceTimerFired;
- (void)senderPresenceTimerFired;
- (void)makePresenceRequest;
- (void)leave;
- (void)deleteMessageGroupWithMessage:(id)arg1;
- (void)saveUnknownChatIfNecessary:(id)arg1;
- (void)unsaveMessage:(id)arg1 inStackedGroup:(_Bool)arg2;
- (void)saveMessage:(id)arg1 inStackedGroup:(_Bool)arg2;
- (void)cleanUpClearedMessages;
- (void)clearReleasedMessages;
- (id)chatReleaseMessageOfType:(unsigned long long)arg1;
- (void)sendReleaseMessageOfType:(unsigned long long)arg1;
- (void)markChatsDisplayedUntilChatId:(id)arg1;
- (void)markChatsReleasedByFriendUntilTimestamp:(id)arg1;
- (void)markChatsReleasedUntilChatId:(id)arg1 shouldDelete:(_Bool)arg2;
- (_Bool)recentlyBackgroundedWithChatVisible;
- (_Bool)shouldAddNewSnap:(id)arg1 forChat:(id)arg2;
- (_Bool)shouldKeepPaymentMessage:(id)arg1;
- (_Bool)shouldKeepMessage:(id)arg1 userSequence:(unsigned long long)arg2 recipientSequence:(unsigned long long)arg3;
- (void)insertBaseMessage:(id)arg1;
- (void)sendPendingChatMessages;
- (void)updateChatPresence:(_Bool)arg1;
- (id)getSnapFromSnapMetadata:(id)arg1;
- (_Bool)didUpdateWithSnapFromPushNotif:(id)arg1 snapId:(id)arg2;
- (_Bool)updateFromPushNotifWithMessages:(id)arg1;
- (void)updateChatTypingStateWithState:(id)arg1;
- (void)handleReceivedSnapResponse:(id)arg1;
- (void)updateWithSCCPJSONResponse:(id)arg1;
- (void)updateSnapsWithChat:(id)arg1 postIndividualNotifications:(_Bool)arg2;
- (void)updateWithChat:(id)arg1 postIndividualNotifications:(_Bool)arg2;
- (void)updateWithChat:(id)arg1;
- (void)fetchUpdatesWithSuccess:(id)arg1 failure:(id)arg2 fromRemoteNotification:(_Bool)arg3;
- (void)fetchUpdatesWithSuccess:(id)arg1 failure:(id)arg2;
- (_Bool)fetchUpdatesToSyncSequencesIfNecessary;
- (void)fetchUpdates;
- (void)pruneOldMessages;
- (_Bool)readMessageFromPeerWithSequence:(unsigned long long)arg1;
- (_Bool)receivedMessageWithSequence:(unsigned long long)arg1;
- (_Bool)recognizesMessage:(id)arg1;
- (void)signalRecognizesMessage:(id)arg1;
- (void)displayNotificationForMessageIfNecessary:(id)arg1;
- (void)chatDidUpdateSnap:(id)arg1;
- (void)chatDidUpdateSnapOrMessage:(id)arg1 oldIndex:(id)arg2;
- (void)chatDidUpdateSnapOrMessage:(id)arg1;
- (void)chatDidUpdateMessage:(id)arg1;
- (void)chatDidAddMultipleSCMessage:(id)arg1;
- (void)chatDidAddSCMessage:(id)arg1;
- (void)chatDidLoadMoreOldChats;
- (void)chatDidChangeWithInfo:(id)arg1;
- (void)chatDidChange;
- (void)chatDidChangeWithReceivedMessage:(id)arg1;
- (void)sccpConnected;
- (void)sccpDisconnected:(long long)arg1;
- (void)ensureNonNilObjects;
- (void)insertArchivedSnapsIntoArraysWithCoder:(id)arg1;
- (void)clearInvalidMessages;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)configureForConversationState:(id)arg1;
- (void)configureLastChatMessagesWithActions:(id)arg1 username:(id)arg2 recipientUsername:(id)arg3;
- (void)dealloc;
- (id)initWithSender:(id)arg1 recipient:(id)arg2;
- (id)initWithUsername:(id)arg1 recipientUsername:(id)arg2 fromResponse:(id)arg3 withVisibilityPolicy:(id)arg4;
- (id)initWithUsername:(id)arg1 recipientUsername:(id)arg2 fromResponse:(id)arg3;


@end




@class NSArray, NSDate, NSMutableArray, NSMutableDictionary, NSString, SCArchivedChats, SCChat, TMCache;

@interface SCChats : NSObject <NSCoding>
{
    _Bool _clearing;
    _Bool _failedToLoadMoreChats;
    _Bool _loadingMoreChats;
    NSString *_activeChatRecipientBeforeBackgrounded;
    NSString *_lastChatIdWhenActiveChatEntered;
    NSArray *_chatsAndUnstartedChats;
    NSMutableDictionary *_chats;
    TMCache *_cache;
    NSString *_username;
    SCChat *_visibleChatInChatView;
    NSArray *_clearableChatsCache;
    NSString *_iterToken;
    NSDate *_lastCleanClearedMessagesDate;
    double _lastFullUpdateTime;
    SCArchivedChats *_archivedInitialChats;
    SCArchivedChats *_archivedPaginatedChats;
    NSMutableArray *_unstartedChats;
    NSMutableDictionary *_unstartedChatsDictionary;
    unsigned long long _unstartedChatsMutationVersion;
}

+ (id)profiledSelectorNames;
+ (_Bool)hasUnviewedChats:(id)arg1;
+ (_Bool)hasUnviewedCash:(id)arg1;
+ (_Bool)hasUnviewedSnaps:(id)arg1;
+ (id)filterOrphanedChats:(id)arg1;
+ (long long)unreadCountForChats:(id)arg1;
+ (id)archivedPaginatedChatsPath;
+ (id)archivedInitialChatsPath;
+ (id)singleChatWithUsername:(id)arg1 fromResponse:(id)arg2;
+ (id)chatsWithUsername:(id)arg1 fromResponse:(id)arg2;
@property(nonatomic) unsigned long long unstartedChatsMutationVersion;
@property(retain, nonatomic) NSMutableDictionary *unstartedChatsDictionary;
@property(retain, nonatomic) NSMutableArray *unstartedChats;
@property(retain, nonatomic) SCArchivedChats *archivedPaginatedChats;
@property(retain, nonatomic) SCArchivedChats *archivedInitialChats;
@property(nonatomic) double lastFullUpdateTime;
@property(retain, nonatomic) NSDate *lastCleanClearedMessagesDate;
@property(copy, nonatomic) NSString *iterToken;
@property(retain, nonatomic) NSArray *clearableChatsCache;
@property(retain, nonatomic) SCChat *visibleChatInChatView;
@property(retain, nonatomic) NSString *username;
@property(retain, nonatomic) TMCache *cache;
@property(nonatomic, getter=isLoadingMoreChats) _Bool loadingMoreChats;
@property(nonatomic) _Bool failedToLoadMoreChats;
@property(nonatomic, getter=isClearing) _Bool clearing;
@property(retain, nonatomic) NSMutableDictionary *chats;
@property(retain, nonatomic) NSArray *chatsAndUnstartedChats;
@property(retain, nonatomic) NSString *lastChatIdWhenActiveChatEntered;
@property(retain, nonatomic) NSString *activeChatRecipientBeforeBackgrounded;
- (id)_mediaCardIds;
- (void)_removeExpiredMedia;
- (void)_clearCache;
- (void)resetChatsAndUnstartedChats;
- (void)changedUnstartedChats;
- (void)resetAllUnstartedChatsWithCompletionBlock:(id)arg1;
- (void)resetAllUnstartedChats;
- (void)removeUnstartedChatForRecipient:(id)arg1;
- (void)addUnstartedChatForRecipient:(id)arg1;
- (id)chatRecipientToRemoveFromUnstartedChats:(id)arg1;
- (id)chatRecipientToAddToUnstartedChats:(id)arg1;
- (void)updateUnstartedChatsIfNecessaryWithInfo:(id)arg1;
- (id)unstartedChatForRecipient:(id)arg1;
- (_Bool)isRecipientInUnstartedChats:(id)arg1;
- (void)clearChatForDeletedFriend:(id)arg1;
- (void)clearChatForBlockedFriend:(id)arg1;
- (void)removeAllChats;
- (void)removeChat:(id)arg1;
- (void)clearChat:(id)arg1;
- (void)clearAll;
- (void)cleanUpClearedMessages;
- (void)releaseLeftoverMessages;
- (_Bool)moreChatsToLoad;
- (void)loadMoreChatsFromServer;
- (void)loadMoreChats;
- (id)oldestChat;
- (void)resetOldestChatIterToken;
- (id)getIterToken;
- (void)removeOldChats;
- (void)removeSentGroupedDiscoverSharedMessages:(id)arg1;
- (void)removeSentGroupSnaps;
- (_Bool)removeInvalidChats;
- (void)removeExpiredMessages;
- (void)retryFailedScreenshotMessages;
- (void)sendSnapState:(id)arg1;
- (void)removeMedia:(id)arg1;
- (void)sendMedia:(id)arg1;
- (void)discoverMessageDidSentWithSuccess:(_Bool)arg1 discoverMessage:(id)arg2;
- (void)insertSendingMedia:(id)arg1;
- (id)chatForBaseMediaMessage:(id)arg1;
- (id)allChats;
- (id)clearableChats;
- (id)orderedChats;
- (id)uniqueChats;
- (id)findOrCreateChatForUsername:(id)arg1;
- (id)chatForUsername:(id)arg1;
- (_Bool)firstChatHasLoadedSnap;
- (_Bool)activeChatBeforeBackgroundedHasUnreadMessages;
- (_Bool)hasUnviewedChats;
- (_Bool)hasUnviewedCash;
- (_Bool)hasUnviewedSnaps;
- (long long)unreadCount;
- (long long)count;
- (void)updateSnap:(id)arg1 oldSnap:(id)arg2;
- (void)removeSnap:(id)arg1;
- (void)addSnap:(id)arg1;
- (id)startNewChatWithRecipient:(id)arg1;
- (id)makeNewChatWithConversation:(id)arg1;
- (id)startNewChatWithRecipient:(id)arg1 triggeredByNotification:(_Bool)arg2;
- (_Bool)fetchUpdatesToUpdateReadsIfNecessaryForChat:(id)arg1;
- (_Bool)shouldAcceptMessageFromSender:(id)arg1;
- (void)updateWithSCCPJSONResponse:(id)arg1;
- (void)logReceivedMessagesForNewChat:(id)arg1;
- (void)appendChats:(id)arg1 shouldUpdate:(_Bool)arg2;
- (void)appendChats:(id)arg1 shouldUpdate:(_Bool)arg2 fromServer:(_Bool)arg3;
- (void)updateWithChat:(id)arg1;
- (void)updateWithChats:(id)arg1;
- (void)sccpConnected;
- (void)sccpDisconnected:(id)arg1;
- (void)pruneChats;
- (void)chatsDidChange;
- (void)blockCurrentThreadUntilInitialChatsLoaded;
- (void)unarchiveAdditionalChats;
- (void)ensureNonNilObjects;
- (id)appendArchivedChatsBlock;
- (id)initWithCoder:(id)arg1;
- (void)archiveChatsWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)dealloc;
- (id)initWithUsername:(id)arg1;
- (id)init;


@end

@interface SCChats (API)
+ (void)uploadChatMediaWithParameters:(id)arg1 data:(id)arg2 successBlock:(id)arg3 failureBlock:(id)arg4;
+ (void)fetchGatewayAuthTokenWithParameters:(id)arg1 successBlock:(id)arg2 failureBlock:(id)arg3;
+ (void)fetchConversationAuthTokenWithParameters:(id)arg1 successBlock:(id)arg2 failureBlock:(id)arg3;
+ (void)sendTypingNotificationWithParameters:(id)arg1 successBlock:(id)arg2 failureBlock:(id)arg3;
+ (void)sendTalkingNotificationWithParameters:(id)arg1 successBlock:(id)arg2 failureBlock:(id)arg3;
+ (void)clearConversationWithParameters:(id)arg1 successBlock:(id)arg2 failureBlock:(id)arg3;
+ (void)clearAllConversationsWithParameters:(id)arg1 successBlock:(id)arg2 failureBlock:(id)arg3;
+ (void)fetchConversationWithParameters:(id)arg1 successBlock:(id)arg2 failureBlock:(id)arg3;
+ (void)fetchAllConversationsWithParameters:(id)arg1 successBlock:(id)arg2 failureBlock:(id)arg3;
@end




@class AVPlayer, ManagerUnarchiver, NSArray, NSData, NSDate, NSMutableDictionary, NSString, NSTimer, SCChatLoader, SCSnapLoader, SCStories, SCStoryLoader, User;


@interface Manager : NSObject
{
    ManagerUnarchiver *unarchiver;
    _Bool _shouldRecordFirstSnapWhenLaunchApp;
    _Bool _shouldRecordFirstStoryWhenLaunchApp;
    _Bool _fetchingAllUpdatesFromServer;
    _Bool _pendingAllUpdatesAfterQuickLogin;
    _Bool _pendingConversationsAfterQuickLogin;
    _Bool _pendingFriendsAfterQuickLogin;
    NSTimer *_snapDataTimer;
    User *_user;
    SCStories *_stories;
    NSMutableDictionary *_times;
    AVPlayer *_centralPlayerA;
    AVPlayer *_centralPlayerB;
    SCStoryLoader *_storyLoader;
    SCSnapLoader *_snapLoader;
    SCChatLoader *_chatLoader;
    NSTimer *_centralTimer;
    NSDate *_referenceDateForFeedTimestamps;
    NSData *_pushNotificationDeviceToken;
    NSArray *_enabledIAPCurrencies;
    unsigned long long _seqno;
    unsigned long long _sessionCount;
    NSObject<OS_dispatch_queue> *_flushEventsQueue;
    NSObject<OS_dispatch_queue> *_spotlightIndexingQueue;
}

+ (long long)context;
+ (id)profiledSelectorNames;
+ (void)clearUnusedVideoURLsExcludingURLsFromSnaps:(id)arg1 andStories:(id)arg2;
+ (void)updateFidelius:(id)arg1 oldUserId:(id)arg2;
+ (void)performLoginWithUsernameOrEmail:(id)arg1 password:(id)arg2 preAuthToken:(id)arg3 twoFAMethod:(int)arg4 confirmReactivation:(_Bool)arg5 rememberDevice:(_Bool)arg6 fromDeepLink:(_Bool)arg7 onComplete:(CDUnknownBlockType)arg8;
+ (id)inspectJsonValidity:(id)arg1;
+ (id)shared;
+ (_Bool)isInitialized;
+ (void)sendReportWithMedia:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
+ (void)sendReportWithMetadata:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
+ (void)reportSnapWithParameters:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
+ (void)fetchDataForLocationWithParameters:(id)arg1 callbackQueue:(id)arg2 successBlock:(CDUnknownBlockType)arg3 failureBlock:(CDUnknownBlockType)arg4;
+ (void)uploadUserEventsWithParameters:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
+ (void)registerDeviceTokenWithParameters:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
+ (void)fetchDescriptionForSharedStoryIdWithParameters:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
+ (void)requestDeviceIDWithRetriesWithParameters:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
+ (void)flushEvents:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
+ (void)markViewedSnapsWithParameters:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
+ (void)fetchAllUpdatesWithParameters:(id)arg1 successBlock:(CDUnknownBlockType)arg2 failureBlock:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *spotlightIndexingQueue; // @synthesize spotlightIndexingQueue=_spotlightIndexingQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *flushEventsQueue; // @synthesize flushEventsQueue=_flushEventsQueue;
@property(nonatomic) unsigned long long sessionCount; // @synthesize sessionCount=_sessionCount;
@property(nonatomic) unsigned long long seqno; // @synthesize seqno=_seqno;
@property(retain, nonatomic) NSArray *enabledIAPCurrencies; // @synthesize enabledIAPCurrencies=_enabledIAPCurrencies;
@property(nonatomic) _Bool pendingFriendsAfterQuickLogin; // @synthesize pendingFriendsAfterQuickLogin=_pendingFriendsAfterQuickLogin;
@property(nonatomic) _Bool pendingConversationsAfterQuickLogin; // @synthesize pendingConversationsAfterQuickLogin=_pendingConversationsAfterQuickLogin;
@property(nonatomic) _Bool pendingAllUpdatesAfterQuickLogin; // @synthesize pendingAllUpdatesAfterQuickLogin=_pendingAllUpdatesAfterQuickLogin;
@property(retain, nonatomic) NSData *pushNotificationDeviceToken; // @synthesize pushNotificationDeviceToken=_pushNotificationDeviceToken;
@property(nonatomic) _Bool fetchingAllUpdatesFromServer; // @synthesize fetchingAllUpdatesFromServer=_fetchingAllUpdatesFromServer;
@property(nonatomic) _Bool shouldRecordFirstStoryWhenLaunchApp; // @synthesize shouldRecordFirstStoryWhenLaunchApp=_shouldRecordFirstStoryWhenLaunchApp;
@property(nonatomic) _Bool shouldRecordFirstSnapWhenLaunchApp; // @synthesize shouldRecordFirstSnapWhenLaunchApp=_shouldRecordFirstSnapWhenLaunchApp;
@property(retain, nonatomic) NSDate *referenceDateForFeedTimestamps; // @synthesize referenceDateForFeedTimestamps=_referenceDateForFeedTimestamps;
@property(retain, nonatomic) NSTimer *centralTimer; // @synthesize centralTimer=_centralTimer;
@property(retain, nonatomic) SCChatLoader *chatLoader; // @synthesize chatLoader=_chatLoader;
@property(retain, nonatomic) SCSnapLoader *snapLoader; // @synthesize snapLoader=_snapLoader;
@property(retain, nonatomic) SCStoryLoader *storyLoader; // @synthesize storyLoader=_storyLoader;
@property(retain, nonatomic) AVPlayer *centralPlayerB; // @synthesize centralPlayerB=_centralPlayerB;
@property(retain, nonatomic) AVPlayer *centralPlayerA; // @synthesize centralPlayerA=_centralPlayerA;
@property(retain, nonatomic) NSMutableDictionary *times; // @synthesize times=_times;
@property(retain, nonatomic) SCStories *stories; // @synthesize stories=_stories;
@property(retain, nonatomic) User *user; // @synthesize user=_user;
@property(retain, nonatomic) NSTimer *snapDataTimer; // @synthesize snapDataTimer=_snapDataTimer;
- (_Bool)isOfficialStoryCollaborator;
- (id)preferredProfiledSelectorNames;
- (_Bool)wasStoriesUpdated;
- (void)requestStudySettingsWithDeviceIdHash:(id)arg1 backgroundQueue:(id)arg2;
- (void)fetchRegisterStudySettings;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)resetCentralPlayers;
- (void)initCentralPlayers;
- (void)postServerChallenge;
- (void)logConversationsResponse:(id)arg1;
- (void)clearViewedStories;
- (void)clearExpiredStories;
- (void)clearExpiredAndViewedStories;
- (void)resetAppIconBadgeNumber;
- (void)didAppStartupComplete;
- (_Bool)userHasValidRequest;
- (void)willEnterForegroundFromRemoteNotification:(_Bool)arg1;
- (void)didEnterBackground;
- (void)prepareForBecomeActiveFromRemoteNotification:(_Bool)arg1;
- (void)prepareForResignActive;
- (void)startTimer:(id)arg1 source:(long long)arg2;
- (void)startTimerIfNecessary;
- (void)markSnapAsViewed:(id)arg1;
- (void)tick:(id)arg1;
- (_Bool)hasUnviewedChats;
- (_Bool)hasUnviewedCash;
- (int)hasUnviewedSnaps;
- (long long)unreadMessagesCount;
- (long long)unreadCount;
- (void)registerVoipDeviceToken:(id)arg1;
- (void)registerDeviceToken:(id)arg1;
- (void)checkMobile;
- (void)verifyMobile:(id)arg1 shouldSkipConfirmation:(_Bool)arg2 type:(long long)arg3 isResetPassword:(_Bool)arg4;
- (void)verifyMobile:(id)arg1 shouldSkipConfirmation:(_Bool)arg2 isResetPassword:(_Bool)arg3;
- (void)verifyMobile:(id)arg1 shouldSkipConfirmation:(_Bool)arg2;
- (void)verifyMobile:(id)arg1 type:(long long)arg2;
- (void)verifyMobile:(id)arg1;
- (void)verifyMobilePreLogin:(id)arg1 phoneNumber:(id)arg2 usernameOrEmail:(id)arg3 countryCode:(id)arg4 preAuthToken:(id)arg5;
- (void)_setMobile:(id)arg1 withCountryCode:(id)arg2 phoneCall:(_Bool)arg3 reverified:(_Bool)arg4 isResetPassword:(_Bool)arg5 usernameOrEmail:(id)arg6 preAuthToken:(id)arg7;
- (void)setMobile:(id)arg1 withCountryCode:(id)arg2 phoneCall:(_Bool)arg3 usernameOrEmail:(id)arg4 preAuthToken:(id)arg5;
- (void)setMobile:(id)arg1 withCountryCode:(id)arg2 phoneCall:(_Bool)arg3 reverified:(_Bool)arg4;
- (void)verifyCaptchaWithId:(id)arg1 solution:(id)arg2 isResetPassword:(_Bool)arg3 usernameOrEmail:(id)arg4 successQueue:(id)arg5 completion:(CDUnknownBlockType)arg6;
- (void)fetchCaptchaImagesWithSuccessQueue:(id)arg1 isResetPassword:(_Bool)arg2 usernameOrEmail:(id)arg3 withCompletion:(CDUnknownBlockType)arg4;
- (void)getPasswordStrengthPreLogin:(id)arg1 quickCheck:(_Bool)arg2 preAuthToken:(id)arg3 usernameOrEmail:(id)arg4 onComplete:(CDUnknownBlockType)arg5;
- (void)changePassword:(id)arg1 isResetPassword:(_Bool)arg2 preAuthToken:(id)arg3 usernameOrEmail:(id)arg4 onComplete:(CDUnknownBlockType)arg5;
- (void)doLogoutRequest:(_Bool)arg1;
- (void)logoutForced:(_Bool)arg1;
- (void)forceLogout;
- (void)logout;
- (CDUnknownBlockType)fetchConversationsFailureBlock;
- (CDUnknownBlockType)fetchStoriesFailureBlock;
- (CDUnknownBlockType)fetchUpdatesFailureBlock;
- (CDUnknownBlockType)fetchStoriesSuccessBlock;
- (CDUnknownBlockType)fetchConversationsSuccessBlock;
- (void)checkResyncVersion:(id)arg1;
- (void)updateCacheLimit;
- (CDUnknownBlockType)fetchUpdatesSuccessBlock;
- (void)fetchStoriesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)fetchStories;
- (void)fetchUpdatesWithCompletionHandler:(id)arg1 includeStories:(_Bool)arg2 didHappendWhenAppLaunch:(_Bool)arg3;
- (void)_fetchUpdatesWithCompletionHandler:(CDUnknownBlockType)arg1 includeStories:(_Bool)arg2 includeConversations:(_Bool)arg3 didHappendWhenAppLaunch:(_Bool)arg4 includeFriends:(_Bool)arg5;
- (void)fetchUpdatesWithCompletionHandler:(CDUnknownBlockType)arg1 includeStories:(_Bool)arg2 includeConversations:(_Bool)arg3 didHappendWhenAppLaunch:(_Bool)arg4;
- (void)fetchUpdatesSuccessWithResponse:(id)arg1 withStories:(_Bool)arg2 didPullToRefresh:(_Bool)arg3 didHappenOnAppLaunch:(_Bool)arg4 onCompletion:(CDUnknownBlockType)arg5;
- (void)fetchUpdates;
- (void)_fetchConversationsWithoutFriends:(CDUnknownBlockType)arg1;
- (void)fetchConversations:(CDUnknownBlockType)arg1;
- (void)fetchUpdatesAndStoriesFromLaunchWithConversations:(_Bool)arg1;
- (void)fetchUpdatesAndStories;
- (id)parametersForFetchUpdates;
- (void)markViewedStories:(_Bool)arg1;
- (void)_flushLoggerEvents;
- (void)logFlushedEvents:(id)arg1;
- (void)markViewedSnaps;
- (id)getUpdatedSnapsJsonWithUpdatedSnaps:(id)arg1;
- (id)getUpdatedSnapsDictionaryWithUpdatedSnaps:(id)arg1;
- (void)applyBackgroundFetchUpdates;
- (void)getUsernameSuggestionsOnRegisterFirstName:(id)arg1 lastName:(id)arg2 onComplete:(CDUnknownBlockType)arg3;
- (void)checkRequestedUsername:(id)arg1 onComplete:(CDUnknownBlockType)arg2;
- (void)registerWithFirstName:(id)arg1 lastName:(id)arg2 username:(id)arg3 password:(id)arg4 birthday:(id)arg5;
- (void)registerUsername:(id)arg1;
- (id)jsonStringForEvents:(id)arg1;
- (_Bool)compareSeqno:(unsigned long long)arg1;
- (void)incSeqno;
- (unsigned long long)getSeqno;
- (_Bool)isUserCreated;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end



@class Friends, KeychainItemWrapper, NSArray, NSDate, NSDictionary, NSMutableArray, NSMutableDictionary, NSNumber, NSString, SCCPSessionDataStore, SCChats, SCClientEncryption, SCDiscoverChannels, SCDiscoverUserProperties, SCFeatureSettings, SCProfileImages, SCSecurityProxyCredentials, SCStoryToPostTracker, SCUserCashStatus, SCUserToolTipStatus, Snap, UploadUrlCache;

@interface User : NSObject <NSCoding>
{
    _Bool _bannedFromSearchingFriends;
    _Bool _emailUpdating;
    _Bool _isFindFriendsResultsTrimmed;
    _Bool _findingFriends;
    _Bool _kid;
    _Bool _notificationSoundEnabled;
    _Bool _notificationRingEnabled;
    _Bool _shouldFetchUpdates;
    _Bool _searchableByPhoneNumber;
    _Bool _needsPhoneVerification;
    _Bool _needsCaptchaVerification;
    _Bool _hasVerifiedCaptcha;
    _Bool _isOwnerOfOfficialStory;
    _Bool _shouldShowSuggestionPrompt;
    _Bool _emailVerified;
    _Bool _phoneConfirmed;
    _Bool _addNearbyEnabled;
    _Bool _discoverSharingEnabled;
    _Bool _galleryUseCellular;
    _Bool _galleryCellularOverride;
    _Bool _galleryEnabled;
    _Bool _gallerySaveToDevice;
    _Bool _gallerySeenOnboarding;
    _Bool _gallerySeenIntroductionVideo;
    _Bool _needsReload;
    _Bool _receivedStories;
    _Bool _receivedUpdates;
    _Bool _loginInSession;
    _Bool _isNewUserForTapToSkip;
    _Bool _forcedToVerifyPhone;
    _Bool _hasUnviewedSnaps;
    _Bool _hasUnviewedCash;
    _Bool _hasUnviewedChats;
    _Bool _hasRecentlyResumedFromBackground;
    _Bool _imageTranscodingEnabled;
    _Bool _acceptedTermsOfUseForNineEighteen;
    _Bool _cachingProfileImages;
    _Bool _recentlyUpdatedNumber;
    _Bool _shouldCallToVerifyNumber;
    _Bool _shouldSendTextToVerifyNumber;
    _Bool _tosAccepted;
    _Bool _legacyHasSeenDiscoverSharingOverlayView;
    _Bool _tosAcceptedAgain;
    int _galleryEnterTimesCounterForIntroVideo;
    SCFeatureSettings *_featureSettings;
    NSString *_authToken;
    NSString *_backgroundFetchSecretKey;
    SCChats *_chats;
    Snap *_failedSnap;
    NSMutableDictionary *_findFriendsResults;
    NSMutableDictionary *_findFriendsRequest;
    NSArray *_findFriendsResultsTimestamps;
    NSArray *_findSuggestedFriendsResultsTimestamps;
    NSMutableDictionary *_findFriendsCache;
    NSArray *_findFriendsTimestamps;
    NSDate *_findFriendsWithoutCacheTimestamps;
    Friends *_friends;
    NSNumber *_lastUpdatedTimestamp;
    unsigned long long _newSnapsCount;
    long long _receiveNotifsFrom;
    long long _snapPrivacy;
    long long _storyPrivacy;
    NSDate *_updateTextSent;
    SCCPSessionDataStore *_sccpDataStore;
    SCSecurityProxyCredentials *_securityProxyCredentials;
    SCClientEncryption *_clientEncryption;
    NSString *_username;
    NSString *_email;
    NSString *_userId;
    double _timeEnteredBackground;
    UploadUrlCache *_uploadUrlCache;
    NSDictionary *_officialStories;
    long long _contactsResyncVersion;
    NSString *_suggestionPromptLink;
    NSString *_suggestionPromptText;
    NSString *_suggestionPromptButtonText;
    long long _suggestionPromptTTL;
    long long _suggestionPromptCheckedTimestamp;
    long long _redGearTTL;
    long long _redGearCheckedTimestamp;
    NSString *_pendingEmail;
    unsigned long long _suggestedFriendFetchThreshold;
    NSArray *_trophies;
    long long _lastCheckedTrophiesTimestamp;
    NSString *_snaptagUrl;
    SCProfileImages *_userProfileImages;
    NSArray *_userSegments;
    SCDiscoverUserProperties *_discoverUserProperties;
    SCStoryToPostTracker *_storyToPostTracker;
    NSMutableDictionary *_friendNamesProcessing;
    unsigned long long _sentCount;
    unsigned long long _receivedCount;
    unsigned long long _score;
    unsigned long long _tapToSkipCount;
    unsigned long long _viewedStoriesCount;
    unsigned long long _numExploreSimilarSnapsTooltipDisplays;
    long long _unreadMessageCount;
    long long _newUnreadStoriesCount;
    unsigned long long _payToReplayTimes;
    long long _credits;
    long long _lastApplicationIconBadgeNumber;
    NSNumber *_time;
    NSNumber *_addedFriendsLastViewedTimestamp;
    long long _friendsToolTipLastViewedTimestamp;
    NSString *_mobile;
    NSString *_tentativeMobile;
    NSString *_mobileVerification;
    NSString *_countryCode;
    NSString *_tentativeCountryCode;
    NSMutableDictionary *_snapsViewing;
    NSString *_deviceToken;
    SCUserCashStatus *_cashStatus;
    NSDate *_latestFriendStoryTimestamp;
    NSString *_serverChallenge;
    NSDate *_addedMeLastViewedTimestamp;
    NSMutableArray *_alphabetFriends;
    NSDate *_birthday;
    long long _fetchingUpdatesCount;
    double _lastUpdateTime;
    NSString *_loginUsername;
    NSString *_snapchatPhoneNumber;
    NSMutableArray *_sortedFriends;
    NSMutableDictionary *_viewedSnaps;
    double _timeUntilNextFreeReplayAvailable;
    NSMutableArray *_snapsViewedButNotMarkedAsViewed;
    NSMutableArray *_snapsViewedAndBeingMarkedAsViewed;
    KeychainItemWrapper *_passwordItem;
    NSMutableDictionary *_emojiSkinTones;
    NSMutableArray *_recentlyUsedEmojis;
    NSDictionary *_emojiEditableDict;
    NSDictionary *_emojiDisplayDict;
    NSArray *_emojiDisplayOrderSymbols;
    SCUserToolTipStatus *_userToolTipStatus;
    NSMutableArray *_activeVideoFilenames;
}

+ (void)setMemoryCrashReportMessage:(id)arg1;
+ (id)memoryCrashReportMessage;
+ (_Bool)hasAnySettingsErrors;
+ (_Bool)hasErrorForSettingsKey:(id)arg1;
+ (id)settingsErrorFunctions;
+ (id)path;
+ (void)registerWithEmail:(id)arg1 password:(id)arg2 birthday:(id)arg3;
+ (void)resendTwoFACode:(id)arg1 preAuthToken:(id)arg2 onComplete:(id)arg3;
+ (_Bool)newInstall;
+ (id)createUser;
@property(retain, nonatomic) NSMutableArray *activeVideoFilenames;
@property(nonatomic) _Bool tosAcceptedAgain;
@property(nonatomic) _Bool legacyHasSeenDiscoverSharingOverlayView;
@property(retain, nonatomic) SCUserToolTipStatus *userToolTipStatus;
@property(retain, nonatomic) NSArray *emojiDisplayOrderSymbols;
@property(retain, nonatomic) NSDictionary *emojiDisplayDict;
@property(retain, nonatomic) NSDictionary *emojiEditableDict;
@property(retain, nonatomic) NSMutableArray *recentlyUsedEmojis;
@property(retain, nonatomic) NSMutableDictionary *emojiSkinTones;
@property(nonatomic) _Bool tosAccepted;
@property(retain, nonatomic) KeychainItemWrapper *passwordItem;
@property(retain, nonatomic) NSMutableArray *snapsViewedAndBeingMarkedAsViewed;
@property(retain, nonatomic) NSMutableArray *snapsViewedButNotMarkedAsViewed;
@property(nonatomic) double timeUntilNextFreeReplayAvailable;
@property(retain, nonatomic) NSMutableDictionary *viewedSnaps;
@property(retain, nonatomic) NSMutableArray *sortedFriends;
@property(retain, nonatomic) NSString *snapchatPhoneNumber;
@property(nonatomic) _Bool shouldSendTextToVerifyNumber;
@property(nonatomic) _Bool shouldCallToVerifyNumber;
@property(nonatomic) _Bool recentlyUpdatedNumber;
@property(retain, nonatomic) NSString *loginUsername;
@property(nonatomic) double lastUpdateTime;
@property(nonatomic) long long fetchingUpdatesCount;
@property(nonatomic) _Bool cachingProfileImages;
@property(retain, nonatomic) NSDate *birthday;
@property(retain, nonatomic) NSMutableArray *alphabetFriends;
@property(retain, nonatomic) NSDate *addedMeLastViewedTimestamp;
@property(copy, nonatomic) NSString *serverChallenge;
@property(retain) NSDate *latestFriendStoryTimestamp;
@property(getter=hasAcceptedTermsOfUseForNineEighteen) _Bool acceptedTermsOfUseForNineEighteen;
@property(retain, nonatomic) SCUserCashStatus *cashStatus;
@property(nonatomic) _Bool imageTranscodingEnabled;
@property(retain, nonatomic) NSString *deviceToken;
@property(retain, nonatomic) NSMutableDictionary *snapsViewing;
@property(retain, nonatomic) NSString *tentativeCountryCode;
@property(retain, nonatomic) NSString *countryCode;
@property(retain, nonatomic) NSString *mobileVerification;
@property(retain, nonatomic) NSString *tentativeMobile;
@property(nonatomic) long long friendsToolTipLastViewedTimestamp;
@property(retain, nonatomic) NSNumber *addedFriendsLastViewedTimestamp;
@property(retain, nonatomic) NSNumber *time;
@property(nonatomic) long long lastApplicationIconBadgeNumber;
@property(nonatomic) _Bool hasRecentlyResumedFromBackground;
@property(nonatomic) long long credits;
@property(nonatomic) unsigned long long payToReplayTimes;
@property(nonatomic) _Bool hasUnviewedChats;
@property(nonatomic) _Bool hasUnviewedCash;
@property(nonatomic) _Bool hasUnviewedSnaps;
@property(nonatomic) long long newUnreadStoriesCount;
@property(nonatomic) long long unreadMessageCount;
@property(nonatomic) _Bool forcedToVerifyPhone;
@property(nonatomic) unsigned long long numExploreSimilarSnapsTooltipDisplays;
@property(nonatomic) unsigned long long viewedStoriesCount;
@property(nonatomic) unsigned long long tapToSkipCount;
@property(nonatomic) _Bool isNewUserForTapToSkip;
@property(nonatomic) unsigned long long score;
@property(nonatomic) unsigned long long receivedCount;
@property(nonatomic) unsigned long long sentCount;
@property(nonatomic) _Bool loginInSession;
@property(nonatomic) _Bool receivedUpdates;
@property(nonatomic) _Bool receivedStories;
@property(nonatomic) _Bool needsReload;
@property(retain, nonatomic) NSMutableDictionary *friendNamesProcessing;
@property(nonatomic) _Bool gallerySeenIntroductionVideo;
@property(nonatomic) int galleryEnterTimesCounterForIntroVideo;
@property(nonatomic) _Bool gallerySeenOnboarding;
@property(nonatomic) _Bool gallerySaveToDevice;
@property(nonatomic) _Bool galleryEnabled;
@property(nonatomic) _Bool galleryCellularOverride;
@property(nonatomic) _Bool galleryUseCellular;
@property(retain, nonatomic) SCStoryToPostTracker *storyToPostTracker;
@property(retain, nonatomic) SCDiscoverUserProperties *discoverUserProperties;
@property(nonatomic, getter=isDiscoverSharingEnabled) _Bool discoverSharingEnabled;
@property(retain, nonatomic) NSArray *userSegments;
@property(retain, nonatomic) SCProfileImages *userProfileImages;
@property(retain, nonatomic) NSString *snaptagUrl;
@property(nonatomic) long long lastCheckedTrophiesTimestamp;
@property(retain, nonatomic) NSArray *trophies;
@property(nonatomic) unsigned long long suggestedFriendFetchThreshold;
@property(nonatomic, getter=isAddNearbyEnabled) _Bool addNearbyEnabled;
@property(nonatomic, getter=isPhoneConfirmed) _Bool phoneConfirmed;
@property(retain, nonatomic) NSString *pendingEmail;
@property(nonatomic, getter=isEmailVerified) _Bool emailVerified;
@property(nonatomic) long long redGearCheckedTimestamp;
@property(nonatomic) long long redGearTTL;
@property(nonatomic) long long suggestionPromptCheckedTimestamp;
@property(nonatomic) long long suggestionPromptTTL;
@property(retain, nonatomic) NSString *suggestionPromptButtonText;
@property(retain, nonatomic) NSString *suggestionPromptText;
@property(retain, nonatomic) NSString *suggestionPromptLink;
@property(nonatomic) _Bool shouldShowSuggestionPrompt;
@property(nonatomic) long long contactsResyncVersion;
@property(nonatomic) _Bool isOwnerOfOfficialStory;
@property(retain, nonatomic) NSDictionary *officialStories;
@property(retain, nonatomic) UploadUrlCache *uploadUrlCache;
@property(nonatomic) _Bool hasVerifiedCaptcha;
@property(nonatomic) _Bool needsCaptchaVerification;
@property(nonatomic) _Bool needsPhoneVerification;
@property(nonatomic) double timeEnteredBackground;
@property(readonly, nonatomic) NSString *userId;
@property(retain) NSString *email;
@property(retain) NSString *username;
@property(retain, nonatomic) SCClientEncryption *clientEncryption;
@property(retain, nonatomic) SCSecurityProxyCredentials *securityProxyCredentials;
@property(retain, nonatomic) SCCPSessionDataStore *sccpDataStore;
@property(nonatomic) _Bool searchableByPhoneNumber;
@property(retain, nonatomic) NSDate *updateTextSent;
@property(nonatomic) long long storyPrivacy;
@property(nonatomic) long long snapPrivacy;
@property(nonatomic) _Bool shouldFetchUpdates;
@property(nonatomic) _Bool notificationRingEnabled;
@property(nonatomic) _Bool notificationSoundEnabled;
@property(nonatomic) long long receiveNotifsFrom;
@property(nonatomic) unsigned long long newSnapsCount;
@property(retain, nonatomic) NSNumber *lastUpdatedTimestamp;
@property(getter=isKid) _Bool kid;
@property(retain, nonatomic) Friends *friends;
@property(nonatomic, getter=isFindingFriends) _Bool findingFriends;
@property(retain, nonatomic) NSDate *findFriendsWithoutCacheTimestamps;
@property(retain, nonatomic) NSArray *findFriendsTimestamps;
@property(retain, nonatomic) NSMutableDictionary *findFriendsCache;
@property(retain, nonatomic) NSArray *findSuggestedFriendsResultsTimestamps;
@property(retain, nonatomic) NSArray *findFriendsResultsTimestamps;
@property(retain, nonatomic) NSMutableDictionary *findFriendsRequest;
@property(nonatomic) _Bool isFindFriendsResultsTrimmed;
@property(retain, nonatomic) NSMutableDictionary *findFriendsResults;
@property(retain, nonatomic) Snap *failedSnap;
@property(nonatomic) _Bool emailUpdating;
@property(retain, nonatomic) SCChats *chats;
@property(nonatomic) _Bool bannedFromSearchingFriends;
@property(copy, nonatomic) NSString *backgroundFetchSecretKey;
@property(retain) NSString *authToken;
- (void)updateDiscoverPropertiesWithDict:(id)arg1;
- (void)fetchDiscoverChannels;
@property(nonatomic) unsigned long long discoverEligibility;
@property(readonly, nonatomic) NSDictionary *discoverResourceParameters;
@property(readonly, copy, nonatomic) NSString *discoverAdVideoCatalogEndpoint;
@property(readonly, copy, nonatomic) NSString *discoverVideoCatalogEndpoint;
@property(readonly, copy, nonatomic) NSString *discoverChannelsEndpointString;
@property(readonly, nonatomic) SCDiscoverChannels *discoverChannels;
- (void)clearServerChallenge;
- (_Bool)isInUserSegment:(long long)arg1;
- (_Bool)shouldShowAddContactsFooter;
- (void)fetchTrophiesIfNil;
- (_Bool)hasUnseenTrophies;
- (void)setNowAsLastCheckedTrophiesTimestampAndUpdateServer;
- (void)_willChangeUserTo:(id)arg1;
- (id)mediaFileNames;
- (id)cacheMediaIds;
- (void)prepareForBackgrounding;
- (void)removeVideoPathFromActiveVideoPaths:(id)arg1;
- (void)addVideoPathToActiveVideoPaths:(id)arg1;
- (id)activeVideoPaths;
- (void)applyAllUpdatesResponse:(id)arg1;
- (void)setObject:(id)arg1 forKeyInStandardUserDefaults:(id)arg2;
- (id)objectForKeyInStandardUserDefaults:(id)arg1;
- (id)userSpecificKeyForKey:(id)arg1;
- (id)stringFromReceiveNotifsFrom:(long long)arg1;
- (long long)notificationPrivacyFromString:(id)arg1;
- (id)stringFromStoryPrivacy:(long long)arg1;
- (long long)storyPrivacyFromString:(id)arg1;
- (id)stringFromSnapPrivacy:(long long)arg1;
- (_Bool)visualFiltersEnabled;
- (_Bool)smartFiltersEnabled;
- (void)setSnapsNotRecentlyViewed;
- (void)removeViewedSnapsFromCache;
- (_Bool)hasFreeReplaySnap;
- (void)clearReplayableSnaps;
- (void)setFreeReplayedSnap;
- (void)updateCanReplaySnapsTimeWithCurrentDate:(id)arg1 replayedDate:(id)arg2;
- (id)userAgentHeader;
- (unsigned long long)speedUnit;
- (unsigned long long)temperatureScale;
- (void)setNewTime:(id)arg1;
- (id)formattedTentativeNumber;
- (void)clearMobile;
- (id)formattedMobile;
- (_Bool)hasRegisteredMobileNumber;
- (_Bool)needsVerification;
- (id)displayName;
- (id)getLoginPlaceholder;
- (id)getCountryCode;
- (_Bool)mustAcceptTermsOfUse;
- (_Bool)isLoggedIn;
- (id)getFindFriendsResultsToAdd;
- (id)getBaseFriendGroupForSearch;
- (id)getSnapchatPhoneNumber;
- (id)userAsFriend;
- (id)getContactsNotOnSnapchat;
- (id)unBlockedNonFriendContactsList;
- (id)filteredFindFriendsResults;
- (_Bool)hasUpdatedSnaps;
- (void)redGearDismissed;
- (_Bool)shouldShowRedGear;
- (void)suggestionPromptDismissed;
- (_Bool)shouldShowNewFriendsExpireToolTip:(unsigned long long)arg1;
- (double)friendReqeustRatePerDay;
- (void)updateFriendsToolTipViewed;
- (unsigned long long)unreadAddedFriendsCount;
- (unsigned long long)friendsRequestCountSinceTime:(id)arg1;
- (id)getLatestAddedFriendsTimestamp;
- (void)setAddedFriendsViewed;
- (id)getAddedFriendsPredicateWithForcedInclusion:(id)arg1;
- (id)getFriendsWhoAddedMeToDisplayWithForcedInclusion:(id)arg1;
- (id)getFriendsWhoAddedMeToDisplay;
- (void)addUpdatedSnap:(id)arg1;
- (void)markedSnapsViewed:(id)arg1 withSuccess:(_Bool)arg2;
- (void)updateCreditsWithCreditFromServer:(long long)arg1;
- (unsigned long long)getLocallyConsumedReplayCreditsCount;
- (id)getUpdatedLocallyButNotMarkedAsViewedOnServerSnaps;
- (id)getAndClearUpdatedSnaps;
- (void)insertPostingContributionStory:(id)arg1 contributionStoryType:(long long)arg2;
- (void)insertPostingStory:(id)arg1;
- (void)insertSendingSnap:(id)arg1;
- (void)clearSentSnapsIfNecessary;
- (void)retryMarkingSnapAsViewed:(id)arg1;
- (void)updateChatsWithChats:(id)arg1;
- (void)addRecentlyUsedEmoji:(id)arg1;
- (id)recentlyUsedEmojiList;
- (void)setSkinTone:(id)arg1 emoji:(id)arg2;
- (id)emojiSkinTone:(id)arg1;
- (void)updateRecents;
- (void)setIdentityFromDict:(id)arg1;
- (void)setUserFromDictionary:(id)arg1 identity:(id)arg2 friends:(id)arg3;
- (void)setUserDefaultFromDictionary:(id)arg1;
- (void)setUserFromDictionary:(id)arg1;
- (void)resetFriendmoji:(id)arg1 onFailure:(id)arg2;
- (void)setEditableFriendmojiDict:(id)arg1;
- (void)updateDisplayOrderSymbols;
- (void)putFriendmoji:(id)arg1 type:(long long)arg2 source:(id)arg3 onComplete:(id)arg4 onFailure:(id)arg5;
- (void)updateReadOnlyFriendmojiDict:(id)arg1;
- (void)updateEditableFriendmojiDict:(id)arg1;
- (id)getEditableFriendmojiDict;
- (id)getDisplayOrderSymbols;
- (id)getDisplayFriendmojiDict;
- (void)setFieldsFromDict:(id)arg1;
- (void)markAsAcceptedSquareTOS;
- (void)markAsAcceptedSnapchatTOS;
- (void)updateUserCashStatusWithServer;
- (void)updateUserCashStatusWithDictionary:(id)arg1;
- (void)updateUserCashStatusForPhoneVerify:(id)arg1;
- (void)updateSCCPSessionDataStore:(id)arg1;
- (void)updateUserTooltipWithDictionary:(id)arg1;
- (void)syncUserTooltipUsingUserDefaultData;
- (void)updateBirthday:(id)arg1 onComplete:(id)arg2;
- (id)storyLoader;
- (_Bool)minutePassedSinceEnteredBackground;
- (void)updateSpeedUnit:(unsigned long long)arg1;
- (void)updateTemperatureScale:(unsigned long long)arg1;
- (void)updateSearchableByPhoneNumber:(_Bool)arg1;
- (void)updateNotificationRingSetting:(_Bool)arg1;
- (void)updateNotificationSoundSetting:(_Bool)arg1;
- (void)updateReceiveNotificationsFromSetting:(long long)arg1;
- (void)updateViewMyStoriesSetting:(long long)arg1 withFriendsToBlock:(id)arg2 callback:(id)arg3;
- (void)updateViewMyStoriesSetting:(long long)arg1;
- (void)updateSendMeSnapsSetting:(long long)arg1;
- (void)changePassword:(id)arg1 onComplete:(id)arg2;
- (void)getPasswordStrength:(id)arg1 quickCheck:(_Bool)arg2 onComplete:(id)arg3;
- (void)checkValidEmail:(id)arg1 onComplete:(id)arg2;
- (void)confirmPhoneWithPassword:(id)arg1 onComplete:(id)arg2;
- (void)requestEmailVerification:(id)arg1;
- (void)updateEmail:(id)arg1 onComplete:(id)arg2;
- (void)reauthenticate:(id)arg1 onComplete:(id)arg2;
- (void)receivedEmailVerificationPush;
- (_Bool)applyChatPushPayload:(id)arg1 fromSender:(id)arg2;
- (id)getDecryptedDataFromPushPayload:(id)arg1;
- (_Bool)applySnapPushPayload:(id)arg1 fromSender:(id)arg2;
- (void)updateFromRemoteNotification:(id)arg1;
- (void)fetchUpdatesIfNeccessary;
- (void)doneFetchingUpdates;
- (void)startFetchingUpdates;
- (_Bool)shouldPromptFetchUpdates;
- (id)populateShareKeyedFriends;
- (void)saveSharedState;
- (_Bool)saveStateIncludingStories:(_Bool)arg1;
- (_Bool)saveState;
- (void)snapSent:(id)arg1 snapIdsAndTimestamps:(id)arg2;
- (void)setSnapsViewingToViewed;
- (void)clearLoadedReplaySnaps:(_Bool)arg1;
- (void)clearLoadedReplaySnapsExceptFromSender:(id)arg1 shouldClearReplayableState:(_Bool)arg2;
- (id)allSnaps;
- (void)updateFeatureSettings:(id)arg1;
@property(retain) SCFeatureSettings *featureSettings;
- (void)updatePhoneNumber:(id)arg1;
- (void)removeInvitedFriends:(id)arg1;
- (void)setHasInvitedNumber:(id)arg1;
- (_Bool)hasInvitedNumber:(id)arg1;
- (id)constructFindFriendsResultDict:(id)arg1 invitesResults:(id)arg2;
- (id)constructInvitesResults:(id)arg1 localNumbers:(id)arg2;
- (id)constructMatchedDisplayNamesSet:(id)arg1 useCache:(_Bool)arg2;
- (id)constructNewServerContactDisplayNameSet:(id)arg1;
- (id)constructMatchedResultsFromResponse:(id)arg1 useCache:(_Bool)arg2;
- (void)insertNewContactsToSuggestedFriends:(id)arg1 matchesResults:(id)arg2;
- (void)findFriendsUsingRequestCache:(_Bool)arg1 allUpdateCheck:(_Bool)arg2 pageType:(long long)arg3 shouldRecommend:(_Bool)arg4;
- (void)findFriendsUsingRequestCache:(_Bool)arg1 allUpdateCheck:(_Bool)arg2;
- (void)findFriendsUsingRequestCache:(_Bool)arg1 pageType:(long long)arg2;
- (void)findFriendsUsingRequestCache:(_Bool)arg1;
- (void)findFriendsUsingRequestCache:(_Bool)arg1 pageType:(long long)arg2 shouldRecommend:(_Bool)arg3;
- (id)getAddressBookRequestAccessCompletionHandler:(long long)arg1 source:(id)arg2 shouldRecommend:(_Bool)arg3;
- (void)findNearbyFriends:(id)arg1 totalPollingDurationMillis:(long long)arg2 showErrorOverlay:(_Bool)arg3 onComplete:(id)arg4;
- (_Bool)userNeedsToConfirmContactsAccess;
- (_Bool)hasAddedFriendInAddressBook:(id)arg1;
- (_Bool)isContactOnSnapchat:(id)arg1;
- (_Bool)hasContactsOnSnapchat;
- (_Bool)shouldFindFriends;
- (_Bool)shouldFindFriendsWithoutCache;
- (_Bool)shouldFindSuggestedFriends;
- (_Bool)shouldRequestSuggestedFriend;
- (_Bool)didFindFriends;
- (_Bool)canFindFriends;
@property(nonatomic) _Bool hasGrantedContactAccess;
- (long long)friendCount;
- (void)setHasPostponedLocationPermissions:(_Bool)arg1;
- (_Bool)hasPostponedLocationPermissions;
- (_Bool)hasDisplay;
- (void)incrementChatSessionsForSaveDropdownCount;
- (long long)chatSessionCountForSaveDropdownSoFar;
- (void)setPressedAndHeldToSaveOrUnsave;
- (_Bool)hasPressedAndHeldToSaveOrUnsave;
- (void)setCreatedAccountAfterChatV1_5;
- (_Bool)createdAccountAfterChatV1_5;
- (_Bool)shouldDisplayTapToSaveDropdown;
- (id)lastSignupPageviewTimestamp;
- (void)updateLastSignupPageviewTimestamp;
- (void)setDismissedLocationHeader;
@property(nonatomic) _Bool hasActivatedLenses;
@property(nonatomic) unsigned long long appStartCountBeforeShowLensesActivationTooltip;
@property(nonatomic) unsigned long long lensesActivationTooltipShownCount;
- (void)setDisplayedLensesActivationTooltipWithSuccess:(_Bool)arg1;
- (void)setDisplayedExploreSimilarSnapsTooltip;
- (void)setDisplayedGallerySetToPrivatePopup;
- (void)setDisplayedPreviewSaveToGalleryTooltip;
- (void)setDisplayedTrophyCaseToolTip;
- (void)setDisplayedSaveEntireStoryPopup;
- (void)setDisplayedDeleteSharedStoryPopup;
- (void)setDidTakeActionOnPromptFilterView;
- (void)setDisplayedSwipeHelp;
- (void)setDisplayedSnapAndDriveWarning;
- (void)setAcceptedAddNearbyPrompt;
- (void)setDisplayedSwipeDownToDismissTappingQuicklyTooltip;
- (void)setDisplayedSwipeDownToDismissTooltip;
- (void)setDisplayedTapToSkipTooltip;
- (void)setDisplayedProfilePicturesTooltip;
- (void)setDisplayedNewFriendTooltip;
- (void)setDisplayedSettingsMoveTooltip;
- (void)setDisplayedEnabledLocationServicesPopup;
- (void)setDisplayedSharedStoriesIntroSend:(id)arg1;
- (void)setDisplayedStoriesIntroSend;
- (void)setDisplayedStoriesIntro;
- (void)setDidPostStory;
- (void)setDisplayedCaptionHelp;
- (void)setDidSendSnap:(id)arg1;
- (void)setDidTakePictureOrVideo;
- (void)setDisplayedClearConverationConfirmation;
- (_Bool)shouldDisplayLocationHeader;
- (_Bool)shouldDisplayLensesActivationTooltip;
- (_Bool)shouldDisplayExploreSimilarSnapsTooltip;
- (_Bool)shouldDisplayTrophyTooltip;
- (_Bool)shouldDisplayClearConversationConfirmation;
- (_Bool)shouldDisplaySaveEntireStoryPopup;
- (_Bool)shouldDisplayDeleteSharedStoryPopup;
- (_Bool)shouldDisplaySwipeHelp;
- (_Bool)shouldDisplaySnapAndDriveWarning;
- (_Bool)shouldDisplayAddNearbyPrompt;
- (_Bool)shouldDisplaySwipeDownToDismissTappingQuicklyTooltip;
- (_Bool)shouldDisplaySwipeDownToDismissTooltip;
- (_Bool)shouldDisplayTapToSkipTooltip;
- (_Bool)shouldDisplayProfilePicturesTooltip;
- (_Bool)shouldDisplayNewFriendTooltip;
- (_Bool)shouldDisplaySettingsMoveTooltip;
- (_Bool)shouldDisplayEnableLocationServicesPopup;
- (_Bool)shouldDisplayVideoHelp;
- (_Bool)shouldDisplaySharedStoriesIntroSend:(id)arg1;
- (_Bool)shouldDisplayStoriesIntroSend;
- (_Bool)shouldDisplayStoriesIntro;
- (_Bool)shouldDisplayCaptionHelp;
- (id)timesCashChatHelpDisplayed;
- (void)incrementTimesCashChatHelpDisplayed;
- (_Bool)shouldDisplayCashChatHelp;
- (id)timesHereChatHelpDisplayed;
- (void)incrementTimesHereChatHelpDisplayed;
- (_Bool)shouldDisplayHereChatHelp;
- (void)removeExpiredMessages;
- (void)logoutUserAndPostNotification:(_Bool)arg1 forcedLogout:(_Bool)arg2;
- (void)logoutUserAndPostNotification:(_Bool)arg1 forcedLogout:(_Bool)arg2 isFromRegistration:(_Bool)arg3;
- (void)forceLogoutUser;
- (void)logoutUser;
- (void)getUsernameSuggestions:(id)arg1 refreshSuggestions:(_Bool)arg2 onComplete:(id)arg3;
- (void)setVerificationNeededFromDictionary:(id)arg1;
- (void)loginSuccessWithDictionary:(id)arg1;
@property(nonatomic) _Bool hasReceivedVideoChatBefore;
@property(nonatomic) _Bool hasUsedVideoChatBefore;
- (void)setDisplayedLogin;
- (_Bool)shouldDisplayGallerySetToPrivatePopup;
- (_Bool)shouldDisplayPreviewSaveToGalleryTooltip;
- (_Bool)shouldTreatAsInstalledAfterDiscover;
- (void)setHasSeenCameraBefore;
- (_Bool)hasSeenCameraBefore;
@property(nonatomic) _Bool hasSeenChatBefore;
@property(nonatomic) _Bool hasViewedSnapBefore;
- (void)setVerifiedNumberViaText;
- (_Bool)hasVerifiedNumber;
- (void)removeUserDefaultData;


@end


@class NSArray, NSDate, NSNumber, NSSet, NSString;

@interface Friend : NSObject
{
    NSString *_kvoName;
    NSString *_name;
    NSString *_userId;
    NSString *_display;
    NSSet *_searchKeywords;
    long long _type;
    NSArray *_bests;
    NSDate *_bestsUpdated;
    NSNumber *_score;
    NSArray *_friendmojiSymbols;
    long long _snapStreakCount;
    NSString *_snaptagUrl;
    NSString *_sharedStoryDescription;
    NSString *_sharedStoryId;
    NSString *_sharedStoryVenue;
    NSDate *_expiration;
}

+ (id)friendWithSuggestedFriend:(id)arg1;
+ (id)friendWithAddedFriend:(id)arg1;
@property(retain, nonatomic) NSString *snaptagUrl; 
@property(readonly, nonatomic) long long snapStreakCount;
@property(retain, nonatomic) NSArray *friendmojiSymbols;
@property(nonatomic) _Bool scrambleBestFriends;
@property(retain, nonatomic) NSNumber *score;
@property(retain, nonatomic) NSDate *bestsUpdated;
@property(retain, nonatomic) NSArray *bests;
@property(nonatomic) long long type;
@property(retain, nonatomic) NSSet *searchKeywords;
@property(nonatomic) _Bool isVerified;
@property(copy, nonatomic) NSString *display;
@property(copy, nonatomic) NSString *userId;
@property(copy, nonatomic) NSString *name;
@property(retain, nonatomic) NSString *kvoName;

- (_Bool)shouldShowFriendmoji:(id)arg1 forViewType:(long long)arg2;
- (id)getFriendmojiForViewType:(long long)arg1;
- (id)getSharedStoriesMessage;
- (id)getKey;
- (id)duplicate;
- (id)updateWithFriend:(id)arg1;
- (id)nameToDisplay;
- (_Bool)hasDisplay;
- (_Bool)shouldFetchBestFriends;
- (_Bool)fetchedBestFriends;
- (id)toDictionary;
@property(readonly) unsigned long long hash;
- (_Bool)isEqualToFriend:(id)arg1;
- (long long)compare:(id)arg1;
- (_Bool)keywordMatchesCleanedQuery:(id)arg1;
- (_Bool)matchesForOfficialStorySearch:(id)arg1;
- (_Bool)matchesByDisplayName:(id)arg1;
- (_Bool)matchesByUsername:(id)arg1;
- (_Bool)matches:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (void)updateSnaptagUrl:(id)arg1;
- (id)initWithSearchResultSOJU:(id)arg1;
- (void)initNewFriendFields;
- (id)initWithName:(id)arg1;
- (id)initWithRecent:(id)arg1;
- (id)initWithFriend:(id)arg1;
- (id)initWithFindFriendsContact:(id)arg1;
- (id)initWithSoju:(id)arg1;

@end

@class NSMutableArray, NSMutableDictionary, NSString, SCFriendProfileCollection, SCRecentFriends;

@interface Friends : NSObject
{
    NSMutableArray *_bestFriends;
    SCFriendProfileCollection *_friendProfileCollection;
    NSMutableArray *_addingFriends;
    NSMutableDictionary *_allFriends;
    NSMutableDictionary *_allFriendsByUserId;
    NSMutableArray *_blockedFriends;
    NSMutableArray *_suggestedFriends;
    NSMutableArray *_friendsWhoAddedYou;
    NSMutableDictionary *_friendsWhoAddedYouDictionary;
    NSMutableArray *_nonexistentFriends;
    SCRecentFriends *_recentFriends;
    NSMutableArray *_sortedFriendsAndPendings;
    NSMutableArray *_sortedFriendsAndPendingsKeys;
    long long _friendFriendCount;
    long long _friendsAddedInRegistrationCount;
    NSString *_deltaFriendToken;
}

+ (id)profiledSelectorNames;
+ (id)getFriendIdsFromFriends:(id)arg1;
+ (id)getFriendNamesFromFriends:(id)arg1;
+ (id)createPredictorForSuggestedFriends:(long long)arg1;
+ (id)createDescendingSortComparatorForSuggestedFriends:(long long)arg1;
+ (id)sortFriendsByUsername:(id)arg1;
+ (id)sortFriendsByDisplayName:(id)arg1;
+ (id)organizeFriendsByFirstLetter:(id)arg1;
+ (void)logUnblockProfileEvent:(_Bool)arg1 unblockedFriend:(id)arg2 context:(id)arg3;
@property(retain) NSString *deltaFriendToken;
@property(nonatomic) long long friendsAddedInRegistrationCount;
@property(nonatomic) long long friendFriendCount;
@property(retain, nonatomic) NSMutableArray *sortedFriendsAndPendingsKeys;
@property(retain, nonatomic) NSMutableArray *sortedFriendsAndPendings;
@property(retain, nonatomic) SCRecentFriends *recentFriends;
@property(retain, nonatomic) NSMutableArray *nonexistentFriends;
@property(retain, nonatomic) NSMutableDictionary *friendsWhoAddedYouDictionary;
@property(retain, nonatomic) NSMutableArray *friendsWhoAddedYou;
@property(retain, nonatomic) NSMutableArray *suggestedFriends;
@property(retain, nonatomic) NSMutableArray *blockedFriends;
@property(retain, nonatomic) NSMutableDictionary *allFriendsByUserId;
@property(retain, nonatomic) NSMutableDictionary *allFriends;
@property(retain, nonatomic) NSMutableArray *addingFriends;
@property(retain, nonatomic) SCFriendProfileCollection *friendProfileCollection;
@property(retain, nonatomic) NSMutableArray *bestFriends;

- (id)copyWithOnlyAllFriendsArrayCopied;
- (long long)getIndexOfObject:(id)arg1 inSortedArray:(id)arg2 toInsert:(_Bool)arg3;
- (long long)getIndexToInsertKey:(id)arg1 inArray:(id)arg2;
- (id)getKeyForFriend:(id)arg1;
- (void)removeFriendFromSortedFriendsAndPendings:(id)arg1;
- (void)addFriend:(id)arg1 toSortedFriends:(id)arg2 withKeys:(id)arg3;
- (id)removeFriendForName:(id)arg1;
- (void)addFriendToBlocked:(id)arg1;
- (void)putFriend:(id)arg1;
- (id)getOrCreateTempFriendForName:(id)arg1;
- (id)addedFriendForName:(id)arg1;
- (id)friendForUserId:(id)arg1;
- (id)friendForName:(id)arg1;
- (id)displayNamesForUsernames:(id)arg1;
- (id)displayNameForUsername:(id)arg1;
- (void)fetchBestFriendsForFriends:(id)arg1;
- (void)orderAddedFriends;
- (void)updateAddedFriendsWithAddedFriend:(id)arg1;
- (void)updateAddedFriendsWithAddedFriends:(id)arg1;
- (id)updateFriendsWithModifiedFriends:(id)arg1;
- (id)updateFriend:(id)arg1 withFriend:(id)arg2;
- (id)updateFriendsWithFriend:(id)arg1;
- (void)updateFriendsWithFriends:(id)arg1 withSyncType:(long long)arg2;
- (void)clearFriends;
- (void)updateStoryPrivacyWithFriendsToBlock:(id)arg1;
- (void)removeRecentlyAddedFriends:(id)arg1;
- (void)removeFriendFromRequests:(id)arg1 context:(id)arg2;
- (void)unblockFriend:(id)arg1 context:(id)arg2 completion:(id)arg3;
- (void)doBlockOrReport:(id)arg1 action:(id)arg2 blockReasonId:(id)arg3 context:(id)arg4 errorText:(id)arg5 completion:(id)arg6;
- (void)reportFriendAsSpam:(id)arg1 context:(id)arg2 completion:(id)arg3;
- (void)blockFriend:(id)arg1 blockReasonId:(id)arg2 context:(id)arg3 completion:(id)arg4;
- (void)blockFriendRequest:(id)arg1 context:(id)arg2 completion:(id)arg3;
- (void)ignoreFriendRequest:(id)arg1 context:(id)arg2 completion:(id)arg3;
- (void)setDisplay:(id)arg1 forAddedFriend:(id)arg2 context:(id)arg3;
- (void)setDisplay:(id)arg1 forFriend:(id)arg2 context:(id)arg3 onComplete:(id)arg4;
- (void)setSelfDisplay:(id)arg1 context:(id)arg2 onComplete:(id)arg3;
- (void)setDisplay:(id)arg1 forFriend:(id)arg2 context:(id)arg3;
- (void)setSelfDisplay:(id)arg1 context:(id)arg2;
- (void)deleteFriend:(id)arg1 context:(id)arg2 completion:(id)arg3;
- (void)deleteFriend:(id)arg1 context:(id)arg2;
- (void)deleteFriend:(id)arg1 context:(id)arg2 parameters:(id)arg3 errorMessage:(id)arg4 completion:(id)arg5;
- (void)deleteFriend:(id)arg1 context:(id)arg2 parameters:(id)arg3 errorMessage:(id)arg4;
- (id)getSojuFriendForAddition:(id)arg1 sourceType:(id)arg2;
- (void)updateWithOldFriendOnFailure:(id)arg1 friendName:(id)arg2 error:(id)arg3;
- (void)updateWithFriendAdditionOnSuccess:(id)arg1 friendName:(id)arg2 context:(id)arg3;
- (void)doFriendsMultiAddition:(id)arg1 index:(long long)arg2 usernameToOldFriendsMap:(id)arg3 context:(id)arg4 sourceType:(id)arg5 callback:(id)arg6;
- (void)doFriendAddition:(id)arg1 context:(id)arg2 sourceType:(id)arg3 completion:(id)arg4;
- (void)addMultiFriends:(id)arg1 context:(id)arg2 sourceType:(id)arg3 callback:(id)arg4;
- (void)updateWithKeywordForFriend:(id)arg1;
- (void)addFriend:(id)arg1 context:(id)arg2 sourceType:(id)arg3 fromQuickAction:(_Bool)arg4 completion:(id)arg5;
- (void)addFriend:(id)arg1 context:(id)arg2 sourceType:(id)arg3 completion:(id)arg4;
- (void)acceptFriendRequest:(id)arg1 context:(id)arg2 completion:(id)arg3;
- (void)addFriendByName:(id)arg1 context:(id)arg2;
- (void)checkExistenceOfFriendUsername:(id)arg1 completion:(id)arg2;
- (_Bool)isUsernameBlocked:(id)arg1;
- (_Bool)isUsernameAPhoneNumber:(id)arg1;
- (_Bool)isFriendWhoAddedYou:(id)arg1;
- (_Bool)isFriendUsernameValid:(id)arg1;
- (_Bool)isAddingFriend:(id)arg1;
- (_Bool)isFriend:(id)arg1;
- (_Bool)hasRecents;
- (_Bool)hasBestFriends;
- (_Bool)pendingSnapsExistForUsername:(id)arg1;
- (unsigned long long)pendingSnapsCountForUsername:(id)arg1;
- (void)resetFriendCount;
- (_Bool)needRecalculateFriendCount;
- (long long)getFriendsAddedInRegistrationCount;
- (long long)getCount;
- (id)getFriendsWhoAddedYouArray;
- (id)getFriendsListFriends;
- (id)getAllFriendsExceptBlocked;
- (id)getAllFriends;
- (id)getSortedFriendsAndPendingsKeysWithFilterBlock:(id)arg1;
- (id)getSortedFriendsAndPendingsWithFilterBlock:(id)arg1;
- (id)friendFilterBlockLocal:(_Bool)arg1;
- (id)getSortedFriendsAndPendingsKeysWithoutFriends:(id)arg1;
- (id)getSortedFriendsAndPendingsWithoutFriends:(id)arg1;
- (id)getSortedFriendsAndPendingsKeys;
- (id)getSortedFriendsAndPendings;
- (id)getRecentlyAdded;
- (id)getBlockedStoryFriends;
- (id)suggestedFriendsFor:(unsigned long long)arg1 limit:(unsigned long long)arg2;
- (id)getSuggestedFriends;
- (id)getBlockedFriends;
- (id)getRecents;
- (void)didSendSnapToRecipients:(id)arg1;
- (void)updateRecentsWithUsernames:(id)arg1;
- (void)updateRecentsWithChats:(id)arg1;
- (void)updateWithSoju:(id)arg1;
- (id)friendsRequest;
- (id)updateDictForRemovingFriend:(id)arg1;
- (id)updateDictForAddingFriend:(id)arg1;
- (void)updateUnstartedChatsWithInfo:(id)arg1;
- (void)userDisplayNameDidChange;
- (void)friendsDidChange;


@end

@interface Friends (API)
+ (void)fetchScoreForFriend:(id)arg1 successQueue:(id)arg2 failureQueue:(id)arg3 completion:(id)arg4;
+ (void)doBlockOrReportFriendName:(id)arg1 friendId:(id)arg2 action:(id)arg3 blockReasonId:(id)arg4 successBlock:(id)arg5 failureBlock:(id)arg6;
+ (void)doMultiAdditionSojuFriends:(id)arg1 context:(id)arg2 successBlock:(id)arg3 failureBlock:(id)arg4;
+ (void)doAdditionFriendName:(id)arg1 friendId:(id)arg2 context:(id)arg3 sourceType:(id)arg4 successBlock:(id)arg5 failureBlock:(id)arg6;
+ (void)unblockFriendName:(id)arg1 friendId:(id)arg2 successBlock:(id)arg3 failureBlock:(id)arg4;
+ (void)removeFriendFromRequestsName:(id)arg1 friendId:(id)arg2 successBlock:(id)arg3 failureBlock:(id)arg4;
+ (void)setDisplayForFriendName:(id)arg1 friendId:(id)arg2 friendDisplay:(id)arg3 successBlock:(id)arg4 failureBlock:(id)arg5;
+ (void)addFriendByName:(id)arg1 successBlock:(id)arg2 failureBlock:(id)arg3;
+ (void)ignoreFriendRequest:(id)arg1 successBlock:(id)arg2 failureBlock:(id)arg3;
+ (void)findFriendsWithPhoneNumbers:(id)arg1 shouldRecommend:(_Bool)arg2 successBlock:(id)arg3 failureBlock:(id)arg4;
+ (void)findFriendsWithPhoneNumbers:(id)arg1 successBlock:(id)arg2 failureBlock:(id)arg3;
+ (void)searchForVerifiedUsersWithQuery:(id)arg1 successBlock:(id)arg2 failureBlock:(id)arg3;
+ (void)deleteFriendWithParameters:(id)arg1 successBlock:(id)arg2 failureBlock:(id)arg3;
+ (void)fetchBestFriendsOfFriends:(id)arg1 successBlock:(id)arg2 failureBlock:(id)arg3;
@end

@protocol SCMediaOwnerProtocol, SCUserProtocol, SCFeedSwipeDelegate, SCFeedGestureHandlerDelegate;

@class NSString, NSTimer, SCAnimatingReplaySnapView, SCFriendmojiView, UIActivityIndicatorView, UIImageView, UILabel, UIScrollView, UIView;

@protocol SCFeedCellViewModel, SCFeedSwipeDelegate, SCFeedGestureHandlerDelegate;

@interface SCFeedTableViewCell : UITableViewCell
{
    id <SCFeedSwipeDelegate, SCFeedGestureHandlerDelegate> _delegate;
    SCChatViewModelForFeed <SCFeedCellViewModel> *_viewModel;
}

@property(retain, nonatomic) SCChatViewModelForFeed <SCFeedCellViewModel> *viewModel; // @synthesize viewModel=_viewModel;
@property(nonatomic) __weak id <SCFeedSwipeDelegate, SCFeedGestureHandlerDelegate> delegate; // @synthesize delegate=_delegate;
- (_Bool)longPressGestureRecognizerShouldBegin;
- (_Bool)doubleTapGestureRecognizerShouldBegin;
- (_Bool)delayedTapGestureRecognizerShouldBegin;
- (_Bool)tapGestureRecognizerShouldBegin;
- (void)handleLongPress:(id)arg1;
- (void)handleDelayedTap:(id)arg1;
- (void)handleDoubleTap:(id)arg1;
- (void)handleTap:(id)arg1;
- (void)viewHasFullyAppeared;
- (id)identifier;

@end


@class SCFriendProfileCellView, UIView;

@interface SCFriendProfileCell : UITableViewCell
{
    UIView *_bottomBorder;
    SCFriendProfileCellView *_cellView;
}

@property(retain, nonatomic) SCFriendProfileCellView *cellView; // @synthesize cellView=_cellView;
- (Friend*)currentFriend;
- (void)setBottomBorderRightOffset:(double)arg1;
- (void)setBottomBorderHidden:(_Bool)arg1;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end

@class SCMyFriendCellView;

@class Friend, NSString, SCAddFriendButtonV2, SCFriendProfileCellTextView, SCFriendProfileCellTextViewV2, SCFriendmojiView, SCProfilePictureThumbnail;
@protocol SCFriendProfileCellViewDelegate;

@interface SCFriendProfileCellView : UIView
{
    UIView *_thumbnailContainer;
    UIView *_emojiContainer;
    UIView *_buttonContainer;
    UIView *_buttonEmojiContainer;
    SCProfilePictureThumbnail *_thumbnail;
    SCFriendProfileCellTextView *_textView;
    SCFriendProfileCellTextViewV2 *_textViewV2;
    SCFriendmojiView *_friendMojiView;
    SCAddFriendButtonV2 *_button;
    id <SCFriendProfileCellViewDelegate> _delegate;
    Friend *_friend;
}

+ (id)profileCellView:(id)arg1;
- (Friend*)friend;
- (void)didDisplayProfilePictureOnThumbnail:(id)arg1 friend:(id)arg2;
- (void)buttonV2Pressed:(id)arg1 friend:(id)arg2;
- (_Bool)didDisplayProfilePicture;
- (void)setDefaultRightOffset;
- (void)setRightOffset:(double)arg1;
- (void)updateWithMainLabel:(id)arg1 subLabel:(id)arg2 thirdLabel:(id)arg3 style:(long long)arg4;
- (void)updateButtonWithState:(long long)arg1 friend:(id)arg2 style:(long long)arg3;
- (void)updateWithMainLabel:(id)arg1 subLabel:(id)arg2 style:(long long)arg3 paddingStyle:(long long)arg4;
- (void)updateWithMainLabel:(id)arg1 subLabel:(id)arg2 style:(long long)arg3;
- (void)updateEmojiViewWithFriend:(id)arg1 emojiViewType:(long long)arg2;
- (void)updateThumbnailWithFriend:(id)arg1 contexts:(id)arg2 style:(long long)arg3;
- (id)initWithFrame:(struct CGRect)arg1 delegate:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end


@class NSArray, NSDate, NSString, NSURL, SCSimilarSnaps, SCStoryAdStreamInfo, SCTile, Story;

@interface FriendStories : NSObject
{
    SCSimilarSnaps *_similarSnaps;
    NSString *_viewJITText;
    _Bool _local;
    _Bool _shared;
    _Bool _hasCustomDescriptionForLiveStory;
    _Bool _allowStoryExplorer;
    _Bool _isManifestStory;
    _Bool _showViewingJIT;
    _Bool _hasUserStartedViewingUnviewedStories;
    _Bool _hasUserStartedViewingStories;
    long long _unviewedSingleIconMediaState;
    NSURL *_unviewedSingleIconURL;
    long long _fullyViewedSingleIconMediaState;
    NSURL *_fullyViewedSingleIconURL;
    SCStoryAdStreamInfo *_adStreamInfo;
    long long _batchState;
    long long _unviewedBatchState;
    long long _thumbnailState;
    NSString *_sharedId;
    NSString *_mostRecentStoryId;
    NSDate *_mostRecentStoryTimestamp;
    FriendStories *_parentStory;
    NSString *_snapId;
    NSString *_rootSnapId;
    NSArray *_stories;
    NSString *_username;
    NSString *_kvoUsername;
    NSString *_displayName;
    Story *_currentStoryForViewingTypeAll;
    long long _loadContext;
    long long _unviewedLoadContext;
    SCTile *_tile;
    unsigned long long _explorerLevel;
    Story *_storyWithActiveThumbnail;
    long long _thumbnailsBatchState;
    long long _unviewedThumbnailsBatchState;
    unsigned long long _numberOfSnapsViewedAfterAd;
    unsigned long long _numberOfUnviewedSnapsViewedAfterAd;
    unsigned long long _numberOfSnapsViewedSinceLastAdOpportunity;
    long long _nextAdOpportunityPosition;
    NSString *_profileDescription;
    NSString *_deepLinkURL;
}

+ (long long)uniqueCellDataIdForUsername:(id)arg1 section:(long long)arg2;
+ (long long)uniqueCellDataIdForUsername:(id)arg1;
+ (unsigned long long)numberOfSharedStoriesToBatchAutoload;
+ (unsigned long long)numberOfFriendStoriesToBatchAutoload;
+ (unsigned long long)numberOfLoadedSnapsNeededAfterViewing;
+ (unsigned long long)numberOfSnapsToLoadWhileViewingStory;
+ (unsigned long long)numberOfNextLevelSnapsToLoad;
+ (_Bool)isFullyViewedWithStories:(id)arg1;
+ (id)friendStoriesForUsername:(id)arg1;
+ (id)storiesFromDictionary:(id)arg1;
+ (id)friendStoriesFromDictionary:(id)arg1;
@property(copy, nonatomic) NSString *deepLinkURL; // @synthesize deepLinkURL=_deepLinkURL;
@property(copy, nonatomic) NSString *profileDescription; // @synthesize profileDescription=_profileDescription;
@property(nonatomic) long long nextAdOpportunityPosition; // @synthesize nextAdOpportunityPosition=_nextAdOpportunityPosition;
@property(nonatomic) unsigned long long numberOfSnapsViewedSinceLastAdOpportunity; // @synthesize numberOfSnapsViewedSinceLastAdOpportunity=_numberOfSnapsViewedSinceLastAdOpportunity;
@property(nonatomic) unsigned long long numberOfUnviewedSnapsViewedAfterAd; // @synthesize numberOfUnviewedSnapsViewedAfterAd=_numberOfUnviewedSnapsViewedAfterAd;
@property(nonatomic) unsigned long long numberOfSnapsViewedAfterAd; // @synthesize numberOfSnapsViewedAfterAd=_numberOfSnapsViewedAfterAd;
@property(nonatomic) _Bool hasUserStartedViewingStories; // @synthesize hasUserStartedViewingStories=_hasUserStartedViewingStories;
@property(nonatomic) _Bool hasUserStartedViewingUnviewedStories; // @synthesize hasUserStartedViewingUnviewedStories=_hasUserStartedViewingUnviewedStories;
@property(nonatomic) _Bool showViewingJIT; // @synthesize showViewingJIT=_showViewingJIT;
@property(nonatomic) long long unviewedThumbnailsBatchState; // @synthesize unviewedThumbnailsBatchState=_unviewedThumbnailsBatchState;
@property(nonatomic) long long thumbnailsBatchState; // @synthesize thumbnailsBatchState=_thumbnailsBatchState;
@property(retain, nonatomic) Story *storyWithActiveThumbnail; // @synthesize storyWithActiveThumbnail=_storyWithActiveThumbnail;
@property(nonatomic) _Bool isManifestStory; // @synthesize isManifestStory=_isManifestStory;
@property(nonatomic) unsigned long long explorerLevel; // @synthesize explorerLevel=_explorerLevel;
@property(retain, nonatomic) SCTile *tile; // @synthesize tile=_tile;
@property(nonatomic) long long unviewedLoadContext; // @synthesize unviewedLoadContext=_unviewedLoadContext;
@property(nonatomic) long long loadContext; // @synthesize loadContext=_loadContext;
@property(retain, nonatomic) Story *currentStoryForViewingTypeAll; // @synthesize currentStoryForViewingTypeAll=_currentStoryForViewingTypeAll;
@property(retain, nonatomic) NSString *displayName; // @synthesize displayName=_displayName;
@property(retain, nonatomic) NSString *kvoUsername; // @synthesize kvoUsername=_kvoUsername;
@property(retain, nonatomic) NSString *username; // @synthesize username=_username;
@property(retain, nonatomic) NSArray *stories; // @synthesize stories=_stories;
@property(copy, nonatomic) NSString *rootSnapId; // @synthesize rootSnapId=_rootSnapId;
@property(copy, nonatomic) NSString *snapId; // @synthesize snapId=_snapId;
@property(nonatomic) __weak FriendStories *parentStory; // @synthesize parentStory=_parentStory;
@property(retain, nonatomic) NSDate *mostRecentStoryTimestamp; // @synthesize mostRecentStoryTimestamp=_mostRecentStoryTimestamp;
@property(retain, nonatomic) NSString *mostRecentStoryId; // @synthesize mostRecentStoryId=_mostRecentStoryId;
@property(nonatomic) _Bool allowStoryExplorer; // @synthesize allowStoryExplorer=_allowStoryExplorer;
@property(nonatomic) _Bool hasCustomDescriptionForLiveStory; // @synthesize hasCustomDescriptionForLiveStory=_hasCustomDescriptionForLiveStory;
@property(nonatomic, getter=isShared) _Bool shared; // @synthesize shared=_shared;
@property(copy, nonatomic) NSString *sharedId; // @synthesize sharedId=_sharedId;
@property(nonatomic, getter=isLocal) _Bool local; // @synthesize local=_local;
@property(nonatomic) long long thumbnailState; // @synthesize thumbnailState=_thumbnailState;
@property(nonatomic) long long unviewedBatchState; // @synthesize unviewedBatchState=_unviewedBatchState;
@property(nonatomic) long long batchState; // @synthesize batchState=_batchState;
@property(retain, nonatomic) SCStoryAdStreamInfo *adStreamInfo; // @synthesize adStreamInfo=_adStreamInfo;
@property(retain, nonatomic) NSURL *fullyViewedSingleIconURL; // @synthesize fullyViewedSingleIconURL=_fullyViewedSingleIconURL;
@property(nonatomic) long long fullyViewedSingleIconMediaState; // @synthesize fullyViewedSingleIconMediaState=_fullyViewedSingleIconMediaState;
@property(retain, nonatomic) NSURL *unviewedSingleIconURL; // @synthesize unviewedSingleIconURL=_unviewedSingleIconURL;
@property(nonatomic) long long unviewedSingleIconMediaState; // @synthesize unviewedSingleIconMediaState=_unviewedSingleIconMediaState;
- (unsigned long long)viewLocationPositionForLiveStories;
- (void)clearSimilarSnapsForSnapId:(id)arg1;
- (void)clearSimilarSnaps;
- (void)similarSnapsForSnapWithId:(id)arg1 level:(unsigned long long)arg2 completion:(id)arg3;
- (id)mediaFileNames;
- (id)cacheMediaIds;
- (void)setIconMediaState:(long long)arg1 iconType:(unsigned long long)arg2;
- (_Bool)unviewedIconMediaIsLoaded;
- (_Bool)singleIconMediaIsLoaded;
- (void)fetchMediaIfNecessaryForIconType:(unsigned long long)arg1 userInitiated:(_Bool)arg2;
- (void)fetchSingleIconMediaIfNecessaryUserInitiated:(_Bool)arg1;
- (void)fetchSingleIconMediaIfNecessary;
- (void)iconWithType:(unsigned long long)arg1 completion:(id)arg2;
- (id)cacheKeyForIconType:(unsigned long long)arg1;
- (long long)uniqueCellDataIdWithSection:(long long)arg1;
- (long long)uniqueCellDataId;
- (unsigned long long)numberOfLoadedSnapsNeededBeforeViewingForViewingType:(long long)arg1;
- (unsigned long long)numberOfSnapsToLoadInStoryBeforeViewingForViewingType:(long long)arg1;
- (unsigned long long)numberOfLoadedStoryMediaNeededForUnviewedLoadedState;
- (unsigned long long)numberOfLoadedStoryMediaNeededForLoadedState;
- (id)fullyViewedStateKVOKeyPath;
- (_Bool)isFullyViewed;
- (id)iconLoadStateKVOKeyPath;
- (void)fetchPublicContentMiniProfileIcon;
- (void)publicContentMiniProfileImageWithCompletion:(id)arg1;
- (id)publicContentMiniProfileButtonText;
- (id)publicContentMiniProfileDeeplinkURL;
- (void)_setJITText;
- (id)publicContentMiniProfileDescription;
- (id)publicContentMiniProfileTitle;
- (id)friendStoriesCollection;
- (_Bool)matchesByDisplayName:(id)arg1;
@property(readonly, copy) NSString *description;
- (void)resetFriendsStoryThumbnailsState;
- (void)resetFriendsStoryState;
- (id)oldestStoryToView;
- (void)removeStoriesWithIds:(id)arg1;
- (void)removeStoriesWithClientIds:(id)arg1;
- (id)unviewedStories;
- (_Bool)hasSingleIcon;
- (_Bool)containsSharedStory;
- (_Bool)onlyContainsUnviewedStories;
- (_Bool)isViewingLastUnviewedSnap;
- (_Bool)hasUnviewedStories;
- (_Bool)hasStories;
- (_Bool)readyToPlayForViewingType:(long long)arg1;
- (void)fetchThumbnailMedia:(id)arg1;
- (void)fetchMedia:(id)arg1 userInitiated:(_Bool)arg2;
- (void)verifyMediaState:(long long)arg1 forMedia:(id)arg2 type:(id)arg3 storyId:(id)arg4;
- (void)fetchThumbnailMedia;
- (id)storyWithThumbnailToDisplay;
- (unsigned long long)numberOfSnapsRemainingForViewingType:(long long)arg1;
- (long long)indexOfViewingStory;
- (long long)indexOfFirstUnviewedStory;
- (id)nextVideoStoryForViewingType:(long long)arg1;
- (id)nextStoryForViewingType:(long long)arg1;
- (id)storyForViewingType:(long long)arg1;
- (void)fetchMediaForBatch:(unsigned long long)arg1 viewingType:(long long)arg2 startAtIndex:(long long)arg3 loadContext:(long long)arg4 userInitated:(_Bool)arg5 fetchNextLevelSnaps:(_Bool)arg6 onLaunch:(_Bool)arg7;
- (void)fetchMediaForBatch:(unsigned long long)arg1 viewingType:(long long)arg2 loadContext:(long long)arg3 userInitiated:(_Bool)arg4 fetchNextLevelSnaps:(_Bool)arg5 onLaunch:(_Bool)arg6;
- (void)fetchMediaForBatch:(unsigned long long)arg1 viewingType:(long long)arg2 loadContext:(long long)arg3 userInitiated:(_Bool)arg4 onLaunch:(_Bool)arg5;
- (void)resetMostRecentStoryInfo;
- (void)updateWithViewedStoryIds:(id)arg1;
- (void)updateWithStories:(id)arg1 isDelta:(_Bool)arg2;
- (void)updateWithFriendStories:(id)arg1 isDelta:(_Bool)arg2;
- (void)handleKeyChange:(id)arg1 toStory:(id)arg2;
- (void)handleChangetoStories:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (double)totalTimeLeftForViewingType:(long long)arg1;
- (double)totalTimeForViewingType:(long long)arg1;
- (void)removeIndividualStoriesObservers:(id)arg1;
- (void)removeStoriesObservers;
- (void)addIndividualStoriesObservers:(id)arg1;
- (void)addStoriesObservers;
- (void)didDecodeObject;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (void)resetDiskLoadingState;
- (id)initWithCoder:(id)arg1;
- (_Bool)isNormalFriendStories;
- (id)initWithParentStory:(id)arg1 snapId:(id)arg2 similarSnaps:(id)arg3;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@class FriendStories, SCExpandedButton, SCFriendmojiView, SCLoadingIndicatorView, SCMyStories, SCPieSliceView, SCProgressSaveButton, SCSingleIconConfigurer, SCSingleIconViewBase, UIButton, UIImageView, UILabel, UIView;

@interface StoriesCell : UITableViewCell
{
    _Bool _needsTopBorder;
    _Bool _needsBottomBorder;
    _Bool _needsRightEdgeInset;
    _Bool _animatingShowSubView;
    _Bool _animatingHideSubView;
    _Bool _myStoriesExpanded;
    id _delegate;
    SCSingleIconViewBase *_singleIconView;
    SCLoadingIndicatorView *_loadingIndicator;
    long long _cellType;
    long long _previousCellType;
    SCMyStories *_myStories;
    FriendStories *_friendStories;
    FriendStories *_previousStories;
    UILabel *_nameLabel;
    SCExpandedButton *_expandMyStoryButton;
    UIButton *_replySnapButton;
    SCFriendmojiView *_friendMojiView;
    SCProgressSaveButton *_saveButton;
    UIButton *_mySharedStoryInfoButton;
    UILabel *_subLabel;
    UIView *_topBorder;
    UIView *_bottomBorder;
    SCSingleIconConfigurer *_singleIconConfigurer;
    SCPieSliceView *_pieSliceView;
    UIView *_subView;
    UIImageView *_cameraReplyIcon;
}

+ (void)updateLabel:(id)arg1 withStatusText:(id)arg2 date:(id)arg3 showTimestamp:(_Bool)arg4 timestampBeforeStatusText:(_Bool)arg5 isRefresh:(_Bool)arg6;
@property(retain, nonatomic) UIImageView *cameraReplyIcon; // @synthesize cameraReplyIcon=_cameraReplyIcon;
@property(retain, nonatomic) UIView *subView; // @synthesize subView=_subView;
@property(retain, nonatomic) SCPieSliceView *pieSliceView; // @synthesize pieSliceView=_pieSliceView;
@property(retain, nonatomic) SCSingleIconConfigurer *singleIconConfigurer; // @synthesize singleIconConfigurer=_singleIconConfigurer;
@property(retain, nonatomic) UIView *bottomBorder; // @synthesize bottomBorder=_bottomBorder;
@property(retain, nonatomic) UIView *topBorder; // @synthesize topBorder=_topBorder;
@property(nonatomic) _Bool myStoriesExpanded; // @synthesize myStoriesExpanded=_myStoriesExpanded;
@property(retain, nonatomic) UILabel *subLabel; // @synthesize subLabel=_subLabel;
@property(retain, nonatomic) UIButton *mySharedStoryInfoButton; // @synthesize mySharedStoryInfoButton=_mySharedStoryInfoButton;
@property(retain, nonatomic) SCProgressSaveButton *saveButton; // @synthesize saveButton=_saveButton;
@property(retain, nonatomic) SCFriendmojiView *friendMojiView; // @synthesize friendMojiView=_friendMojiView;
@property(retain, nonatomic) UIButton *replySnapButton; // @synthesize replySnapButton=_replySnapButton;
@property(retain, nonatomic) SCExpandedButton *expandMyStoryButton; // @synthesize expandMyStoryButton=_expandMyStoryButton;
@property(retain, nonatomic) UILabel *nameLabel; // @synthesize nameLabel=_nameLabel;
@property(retain, nonatomic) FriendStories *previousStories; // @synthesize previousStories=_previousStories;
@property(retain, nonatomic) FriendStories *friendStories; // @synthesize friendStories=_friendStories;
@property(retain, nonatomic) SCMyStories *myStories; // @synthesize myStories=_myStories;
@property(nonatomic) long long previousCellType; // @synthesize previousCellType=_previousCellType;
@property(nonatomic) long long cellType; // @synthesize cellType=_cellType;
@property(nonatomic) _Bool animatingHideSubView; // @synthesize animatingHideSubView=_animatingHideSubView;
@property(nonatomic) _Bool animatingShowSubView; // @synthesize animatingShowSubView=_animatingShowSubView;
@property(retain, nonatomic) SCLoadingIndicatorView *loadingIndicator; // @synthesize loadingIndicator=_loadingIndicator;
@property(retain, nonatomic) SCSingleIconViewBase *singleIconView; // @synthesize singleIconView=_singleIconView;
@property(nonatomic) _Bool needsRightEdgeInset; // @synthesize needsRightEdgeInset=_needsRightEdgeInset;
@property(nonatomic) _Bool needsBottomBorder; // @synthesize needsBottomBorder=_needsBottomBorder;
@property(nonatomic) _Bool needsTopBorder; // @synthesize needsTopBorder=_needsTopBorder;
@property(nonatomic) __weak id delegate; // @synthesize delegate=_delegate;
- (long long)loadStateForFriendStories:(id)arg1 cellType:(long long)arg2;
- (id)thumbnailLayer;
- (id)thumbnailIcon;
- (void)mySharedStoryInfoPressed;
- (void)savePressed;
- (void)expandMyStoryButtonPressed;
- (void)replySnapButtonPressed;
- (void)saveStorySucceeded:(_Bool)arg1;
- (_Bool)shouldShowTapToReplyForFriendStories:(id)arg1 cellType:(long long)arg2;
- (void)updateSaveStoryProgress:(double)arg1;
- (void)updateStatusTextForFriendStoriesCellWithFriendStories:(id)arg1 forViewingType:(long long)arg2;
- (void)layoutRowsWithHasThumbnail:(_Bool)arg1 hasRightButton:(_Bool)arg2;
- (id)timestampForDate:(id)arg1;
- (void)toggleRightOffset:(_Bool)arg1;
- (void)updateWithFriend:(id)arg1;
- (void)updateSubLabelWithStatusText:(id)arg1 date:(id)arg2 showTimestamp:(_Bool)arg3 timestampBeforeStatusText:(_Bool)arg4;
- (void)updateSubLabelWithStatusText:(id)arg1 date:(id)arg2 showTimestamp:(_Bool)arg3;
- (_Bool)cellIsBeingRefreshed;
- (void)updateSubLabelWithMyStories:(id)arg1;
- (void)updateWithMyStories:(id)arg1 expanded:(_Bool)arg2 isContributionStory:(_Bool)arg3;
- (void)hideSaveButtonHelper:(_Bool)arg1;
- (void)setFriendmojiViewForFriend:(id)arg1;
- (void)addFriendmojiViewForFriend:(id)arg1;
- (void)showPieSliceView:(_Bool)arg1 forFriendStories:(id)arg2;
- (void)updateWithCellType:(long long)arg1 friendStories:(id)arg2;
- (void)updateWithFriendStories:(id)arg1;
- (void)updateWithUnviewedFriendStories:(id)arg1;
- (void)updateWithDiscoverChannel:(id)arg1;
- (void)showTapToReply:(_Bool)arg1;
- (void)hideSubViewWithoutAnimation;
- (void)hideSubViewIfNecessaryAnimated:(_Bool)arg1 duration:(double)arg2 delay:(double)arg3 completion:(id)arg4;
- (void)hideSubViewIfNecessaryAnimated:(_Bool)arg1 duration:(double)arg2;
- (void)hideSubViewIfNecessaryAnimated:(_Bool)arg1;
- (void)showSubViewWithoutAnimation;
- (void)showSubViewIfNecessaryAnimated:(_Bool)arg1;
- (void)setDisplayNameForDiscoverChannel:(id)arg1;
- (void)setDisplayNameForFriendStories:(id)arg1;
- (void)layoutSubviewsForFriend;
- (void)layoutSubviewsForStoryOrDiscover;
- (id)leftButtonConstraintMakerWithView:(id)arg1 referenceView:(id)arg2 resizable:(_Bool)arg3;
- (id)rightButtonConstraintMakerWithView:(id)arg1 resizable:(_Bool)arg2;
- (struct CGRect)thumbnailRect;
- (id)defaultBackgroundColor;
- (void)prepareForReuse;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;

@end




